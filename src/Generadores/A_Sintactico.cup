package Analizadores;
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import org.w3c.dom.Document;
import org.w3c.dom.Element;  
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;


parser code {:
        
        @Override
	public void report_error(String message, Object info) {
            System.err.print("Syntax error: " ); 
            expected();
            System.err.println("pero se encontr칩 el token \'" + ((Symbol)info).value + "\' en la Linea: " + ((Symbol)info).left + ", Columna: " + ((Symbol)info).right + ". " ); 
        }

        @Override
	public void syntax_error(Symbol s){
            System.err.print("Error Sint치ctico: " ); 
            expected();
            System.err.println("pero se encontr칩 el token \'" + sym.terminalNames[s.sym] + "\' en la Linea: " + s.left + ", Columna: " + s.right + ". " ); 
	}

    public void expected(){
        List<Integer> token_list = this.expected_token_ids();
        if (token_list.size() <= 0){
                token_list = this.expected_token_ids();
        }
        String expected_tokens = "";
        for (int i = 0 ; i < token_list.size(); i++){
                int id = token_list.get(i);
                if (id == 1){ //error
                    continue;
                }
                String terminal_name = sym.terminalNames[id];
                if (i == token_list.size() - 1){
                    expected_tokens += terminal_name;
                }else{
                    expected_tokens += terminal_name + " , ";
                }
        }
        System.err.print("Se esperaba alguno de los siguientes tokens: [" + expected_tokens + "] ");
    };

    public void report_fatal_error(String message, Object info) {
        throw new Error("Error Fatal Sint치ctico, no se pudo recuperar del problema.");
    }

    public void unrecovered_syntax_error(Symbol s) {
    }

    @Override
    public int error_sync_size(){
        return 1;
    }
        
:};

action code {:
    TablaSimbolos ts = new TablaSimbolos();
    int offset = 0;
    String ambito = "main";

    /* Contruccion del arbol en XML */

    Document xmlDocument = null;    
    Element nodoPadre = null; 

    private void iniXML() {
        if (xmlDocument == null) {
            try {
                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                xmlDocument = docBuilder.newDocument();//Crear el documento XML
            } catch (Exception e) {
                System.err.println("El arbol tiene Error: " + e.getMessage());
            }
        }
    }

    public void escribirXML() throws javax.xml.transform.TransformerConfigurationException, javax.xml.transform.TransformerException {
        //Escribir el archivo XML         
        xmlDocument.appendChild(nodoPadre);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource origen = new DOMSource(xmlDocument);
        StreamResult result = new StreamResult(new File("AST.xml"));
        transformer.transform(origen, result);
    }
:}


/* Terminals (tokens returned by the scanner). */
//Functiones
terminal Element  Write;
terminal Element  Read;

//Tipos de datos
terminal Element  Array;
terminal Element  Of;
terminal Element  Var;
terminal String   TipoBoolean;
terminal String   TipoChar;
terminal String   TipoInteger;
terminal String   TipoString;

//Operadores
terminal String   OperadorIgual;
terminal String   OperadorDiferente;
terminal String   OperadorMayor;
terminal String   OperadorMenor;
terminal String   OperadorMayorIgual;
terminal String   OperadorMenorIgual;
terminal String   OperadorAnd;
terminal String   OperadorOr;
terminal String   OperadorNot;
terminal String   OperadorSuma;
terminal String   OperadorResta;
terminal String   OperadorMultiplicacion;
terminal String   OperadorMod;
terminal String   OperadorDivision;
terminal String   OperadorDivisionSpecial;

//Estructuras de control
terminal Element  If;
terminal Element  Then;
terminal Element  Else;
terminal Element  Begin;
terminal Element  End;
terminal Element  For;
terminal Element  To;
terminal Element  Do;
terminal Element  While;
terminal Element  Repeat;
terminal Element  Until;

//Otros
terminal String   BracketAbrir;
terminal String   BracketCerrar;
terminal String   Coma;
terminal String   DosPuntos;
terminal String   DosPuntosIgual;
terminal String   Identificador;
terminal String   LlaveAbrir;
terminal String   LlaveCerrar;
terminal String   ParentesisAbrir;
terminal String   ParentesisCerrar;
terminal String   Program;
terminal String   Procedure;
terminal String   Function;
terminal String   PuntoPunto;
terminal String   Punto;
terminal String   PuntoComa;

/*Literales*/
terminal String    LiteralEntero;
terminal Character LiteralCaracter;
terminal String    LiteralBoolean;
terminal String    LiteralString;

/* Non terminals */

nonterminal Element  expr;
nonterminal Element  AritExpr1;
nonterminal Element  AritExpr2;
nonterminal Element  AritExpr3;
nonterminal Element  BoolExpr1;
nonterminal Element  BoolExpr2;
nonterminal Element  BoolExpr3;
nonterminal Element  literal;
nonterminal Element  program;
nonterminal Element  block;
nonterminal Element  blockProc;
nonterminal Element  decls;
nonterminal Element  decl;
nonterminal Element  vardecls;
nonterminal Element  vardecl;
nonterminal Element  forstmt;
nonterminal Element  FunctionCall;

nonterminal Element  functionDecl;
nonterminal Element  inlineArgs;
nonterminal Element  inlineArg;
nonterminal Element  procedureDecl;
nonterminal Element  procInlineDecls;
nonterminal Element  procInlineDecl;

nonterminal Element  type;
nonterminal String   identtype;
nonterminal Element  arraytype;
nonterminal Element  vars;
nonterminal Element  var;

nonterminal Element  exprlist;
nonterminal Element  exprLogical;
nonterminal Element  exprOpLog;
nonterminal Element  opRelacion;
nonterminal Element  opArit;
nonterminal Element  opUnario;
nonterminal Element  opLogico;
nonterminal Element  stmts;
nonterminal Element  stmt;
nonterminal Element  assignstmt;
nonterminal Element  ifstmt;
nonterminal Element  whilestmt;
nonterminal Element  repeatstmt;
nonterminal Element  blockstmt;
nonterminal Element  writestmt;
nonterminal Element  readstmt;

nonterminal Element  integer;
nonterminal Element  character;
nonterminal Element  boolean;
nonterminal Element  string;


/*-* Operator Precedences **/
precedence right DosPuntosIgual;
precedence left OperadorIgual, OperadorMenor, OperadorMayor, OperadorMenorIgual, OperadorMayorIgual, OperadorDiferente;
precedence left OperadorOr;
precedence left OperadorMod, OperadorDivisionSpecial, OperadorAnd;
precedence left Else, PuntoComa;
precedence left error;


program         ::= Program var:v PuntoComa block:b Punto
                {:
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (v != null) { nodoPadre.appendChild(v); }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                    SemanticParser.llenarTablaSimbolos(nodoPadre);
                :}
                |   Program var:v1 ParentesisAbrir vars:vs ParentesisCerrar PuntoComa block:b Punto
                {:
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (v1 != null) { nodoPadre.appendChild(v1); }
                    if (vs != null) { 
                        Element nPadre = xmlDocument.createElement("ProgramArgs");
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = vs.getChildNodes();
                        if (temp.getLength() > 0) {
                            Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                            asd.add((Element) parent);
                        }
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                        nodoPadre.appendChild(nPadre);
                    }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                    SemanticParser.llenarTablaSimbolos(nodoPadre);
                :}
                | error block Punto
                | Program var:v PuntoComa block:b error
                ;

block           ::= decls:d blockstmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (d != null) { nPadre.appendChild(d); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                :}
                |   error End
                ;

blockProc       ::= procInlineDecls:p Begin stmts:s End
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (p != null) { nPadre.appendChild(p); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                :}
                |   blockProc error 
                ;

decls           ::= /* empty */ {: RESULT = null; :}
                |   decl:d decls:ds
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declarations");
                    if (d != null && ds == null) {
                        RESULT = d;
                    } else if (d == null && ds != null){
                        RESULT = ds;
                    } else if (d != null && ds != null) {
                        nPadre.appendChild(d);
                        if (!ds.getNodeName().equals("Declarations")) {
                            nPadre.appendChild(ds);
                        }else{
                            Element nodoPadre = xmlDocument.createElement("ProgramArgs");
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = ds.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                            nodoPadre.appendChild(nPadre);
                        }
                       
                        RESULT = nPadre;
                    } else{ RESULT = null; }      
                :}
                |   decls:ds error 
                ;

decl            ::= Var vardecls:vd
                {:
                    iniXML();
                    RESULT = vd;
                :}
                |   functionDecl:f
                {:
                    iniXML();
                    RESULT = f;
                                        
                :}
                |   procedureDecl:p
                {:
                    iniXML();
                    RESULT = p;                   
                :}
                |   decl:d error
                ;

functionDecl    ::= Function var:i ParentesisAbrir inlineArgs:in ParentesisCerrar DosPuntos type:t PuntoComa blockProc:b PuntoComa
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    nPadre.setAttribute("Type", t.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                |   Function var:i ParentesisAbrir ParentesisCerrar DosPuntos type:t PuntoComa blockProc:b PuntoComa
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    nPadre.setAttribute("Type", t.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                |   Function error
                ;

procedureDecl   ::= Procedure var:i ParentesisAbrir inlineArgs:in ParentesisCerrar PuntoComa blockProc:b PuntoComa
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                |   Procedure var:i ParentesisAbrir ParentesisCerrar PuntoComa blockProc:b PuntoComa
                {:
                    iniXML(); 
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                |   Procedure error 
                ;

procInlineDecls  ::= {: RESULT = null; :}
                |   procInlineDecl:pd procInlineDecls:pds
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcInlinceDecls");
                    if (pd != null && pds == null) {
                        RESULT = pd;
                    } else if(pd == null && pds != null) {
                        RESULT = pds;
                    } else if(pd != null && pds != null) {
                        nPadre.appendChild(pd);
                        nPadre.appendChild(pds);
                        RESULT = nPadre;
                    } else RESULT = null;               
                :}
                ;

procInlineDecl  ::= Var vardecls:vd
                {:
                    iniXML();
                    RESULT = vd;
                :}
                ;


inlineArgs      ::= inlineArg:ia
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    nPadre.appendChild(ia);
                    RESULT = nPadre;
                :}
                |   inlineArg:ia PuntoComa inlineArgs:ias
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    nPadre.appendChild(ia);
                    ArrayList<Element> asd = new ArrayList();
                    NodeList temp = ias.getChildNodes();
                    for (int i = 0; i < temp.getLength(); i++) {
                        asd.add((Element) temp.item(i));
                    }
                    for (int i = 0; i < asd.size(); i++) {
                        nPadre.appendChild(asd.get(i));
                    }
                    RESULT = nPadre;
                :}
                ;

inlineArg       ::= Var vars:vs DosPuntos identtype:t
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",t);
                        String size = "";
                        if(t.equals("integer")){
                            size = "4";
                        } else if(t.equals("boolean")){
                            size = "1";
                        } else if(t.equals("char")){
                            size = "1";
                        } else if(t.equals("string")){
                            size = "4";
                        }
                        nType.setAttribute("Size",size);
                        nType.setAttribute("isPointer","true");
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                :}
                |   vars:vs DosPuntos identtype:t 
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                       ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",t);
                        String size = "";
                        if(t.equals("integer")){
                            size = "4";
                        } else if(t.equals("boolean")){
                            size = "1";
                        } else if(t.equals("char")){
                            size = "1";
                        } else if(t.equals("string")){
                            size = "4";
                        }
                        nType.setAttribute("Size",size);
                        nType.setAttribute("isPointer","false");
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                :}
                ;

vardecls        ::=  /* Empty */
                |   vardecl:v PuntoComa vardecls:vs
                {:
                    iniXML();
                    if(v != null && vs == null ){
                        RESULT = v;
                    } else if(v == null && vs != null){
                        Element nPadre = xmlDocument.createElement("VarDeclaration");
                        nPadre.appendChild(vs);
                        RESULT = nPadre;
                    } else if(v != null && vs != null){
                        Element nPadre = xmlDocument.createElement("VarDeclarations");
                        nPadre.appendChild(v);
                        if (vs.getNodeName().equals("VarDeclaration")) {
                            nPadre.appendChild(vs);
                        } else {
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = vs.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                        RESULT = nPadre;
                    } else RESULT = null;
                :} 
                |   error PuntoComa vardecls:vs 
                |   error vardecls:vs  
                ;

vardecl         ::= vars:vs DosPuntos type:t
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarDeclaration");
                    if (vs != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                String id = asd.get(i).getAttribute("Value");
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    nPadre.appendChild(t);
                    RESULT = nPadre;                    
                :}
                ;

vars            ::= var:v
                {:
                    iniXML();
                    RESULT = v;                    
                :}
                |  vars:vs Coma var:v
                {:
                    iniXML();
                    vs.appendChild(v);
                    RESULT = vs;                    
                :}
                ;

var             ::= Identificador:i
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ID");
                    nPadre.setAttribute("Value",i);
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    RESULT = nPadre;                    
                :}
                |   Identificador:i BracketAbrir AritExpr1:e1 BracketCerrar
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ARRAY");
                    nPadre.setAttribute("Value",i);
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    nPadre.appendChild(e1);
                    RESULT = nPadre;                    
                :}
                ;

type            ::= identtype:it
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(it != null) {
                        nPadre.setAttribute("Value",it);
                        String size = "";
                        if(it.equals("integer")){
                            size = "4";
                        } else if(it.equals("boolean")){
                            size = "1";
                        } else if(it.equals("char")){
                            size = "1";
                        } else if(it.equals("string")){
                            size = "4";
                        }

                        nPadre.setAttribute("Size",size);
                        RESULT = nPadre;
                    } else RESULT = null;
                :}
                |   arraytype:ats
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(ats != null) {
                        nPadre.setAttribute("Value",ats.getAttribute("Value"));
                        nPadre.setAttribute("Size",ats.getAttribute("Size"));
                        RESULT = nPadre;
                    } else RESULT = null;
                :}
                ;

identtype       ::= TipoChar:c
                {:
                   RESULT = c;
                :}
                |   TipoString:c
                {:
                   RESULT = c;
                :}
                |   TipoBoolean:c
                {:
                   RESULT = c;
                :}
                |   TipoInteger:c
                {:
                   RESULT = c;
                :}
                ;


arraytype       ::= Array BracketAbrir literal:l1 PuntoPunto literal:l2 BracketCerrar Of identtype:t
                {:  
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArrayType");
                    if(t != null){
                        nPadre.setAttribute("Value","Array."+t+"."+l1.getAttribute("Value")+"."+l2.getAttribute("Value"));
                        int size = 0;
                        if(t.equals("integer")){
                            size = 4;
                        } else if(t.equals("boolean")){
                            size = 1;
                        } else if(t.equals("char")){
                            size = 1;
                        } else if(t.equals("string")){
                            size = 4;
                        }
                        int temp1 = Integer.parseInt(l1.getAttribute("Value"));
                        int temp2 = Integer.parseInt(l2.getAttribute("Value"));
                        nPadre.setAttribute("Size", ((temp2-temp1+1)*size)+"");
                    }
                    RESULT = nPadre;
                :}
                ;


stmts           ::= stmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statements");
                    if (s != null) { nPadre.appendChild(s); RESULT = nPadre;}
                    
                :}
                |   stmt:s PuntoComa stmts:ss
                {:
                    Element nPadre = xmlDocument.createElement("Statements");
                    iniXML();
                    if(s != null && ss == null){
                        RESULT = s;
                    } else if(s == null && ss != null){
                        RESULT = ss;
                    } else if(s != null && ss != null){
                        nPadre.appendChild(s);
                        nPadre.appendChild(ss);
                        RESULT = nPadre;
                    } else RESULT = null;
                :}
                |   error stmts:s 
                ;

stmt            ::= /* Empty */ {: RESULT = null; :}
                |   FunctionCall:fc {:
                    iniXML();
                    RESULT = fc;
                :}
                | assignstmt:s
                {:
                    iniXML();               
                    RESULT = s;
                :}
                | ifstmt:s
                {:
                    iniXML();              
                    RESULT = s;
                :}
                | forstmt:s
                {:
                    iniXML();             
                    RESULT = s;
                :}
                | whilestmt:s
                {:
                    iniXML();   
                    RESULT = s;
                :}
                | repeatstmt:s
                {:
                    iniXML();          
                    RESULT = s;
                :}
                | readstmt:s
                {:
                    iniXML();          
                    RESULT = s;
                :}
                | writestmt:s
                {:
                    iniXML();       
                    RESULT = s;
                :}
                | blockstmt:s
                {:
                    iniXML();             
                    RESULT = s;
                :}
                |   stmt:s error  
                ;

blockstmt       ::= Begin stmts:s End
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Body");
                    if (s != null) { nPadre.appendChild(s); }             
                    RESULT = nPadre;
                :}
                |   blockstmt error
                ;

assignstmt      ::= var:i DosPuntosIgual expr:e 
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Assignment");
                    if (i != null) { nPadre.appendChild(i); }
                    if (e != null) { nPadre.appendChild(e); }                   
                    RESULT = nPadre;
                :}  
                |   assignstmt error
                ;

ifstmt          ::= If:i expr:e Then stmt:s Else stmt:s2
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    if (s2 != null) { nPadre.appendChild(s2); }

                    RESULT = nPadre;
                :}
                |   If:i expr:e Then stmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                |   ifstmt error
                |   error Else stmt:s2
                ;

forstmt         ::= For assignstmt:a To expr:e Do blockstmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                | For assignstmt:a To expr:e Do 
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                :}
                |   forstmt error
                ;

whilestmt       ::= While expr:e Do blockstmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                | While expr:e Do 
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                :}
                |   whilestmt error
                ;

repeatstmt      ::= Repeat stmts:s Until expr:e
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RepeatStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                :}
                |   repeatstmt error
                ;

writestmt       ::= Write ParentesisAbrir string:s ParentesisCerrar
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                |   Write ParentesisAbrir string:s Coma var:v ParentesisCerrar
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                :}
                |   error ParentesisCerrar
                ;

readstmt        ::= Read ParentesisAbrir var:v ParentesisCerrar
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ReadStatement");
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                :}
                |   readstmt error
                ;

expr            ::= AritExpr1:e1
                {:
                    iniXML();    
                    RESULT = e1;
                :}
                |   BoolExpr1:b1 
                {:
                    iniXML();
                    RESULT = b1;
                :}
                |   AritExpr1:e1 opRelacion:op AritExpr1:e2
                {:
                    iniXML();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                :} 
                |   FunctionCall:fc
                {:
                    iniXML();
                    RESULT = fc;
                :}
                ;

FunctionCall    ::= var:v ParentesisAbrir exprlist:el ParentesisCerrar
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                :}
                |   var:v ParentesisAbrir ParentesisCerrar
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    RESULT = nPadre;
                :}
                ;

AritExpr1       ::= AritExpr1:e1 OperadorSuma AritExpr2:e2
                {:
                    iniXML();
                    Element node = xmlDocument.createElement("Plus");
                    node.setAttribute("Value","+");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                :}
                |   AritExpr1:e1 OperadorResta AritExpr2:e2
                {:
                    iniXML();
                    Element node = xmlDocument.createElement("Minus");
                    node.setAttribute("Value","-");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                :}
                |   AritExpr2:e1
                {:
                    iniXML();                
                    RESULT = e1;
                :}
                ;

AritExpr2           ::= AritExpr2:e1 OperadorMultiplicacion AritExpr3:e2
                {:
                    iniXML();
                    Element node = xmlDocument.createElement("Times");
                    node.setAttribute("Value","*");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                :}
                | AritExpr2:e1 OperadorDivision AritExpr3:e2
                {:
                    iniXML();
                    Element node = xmlDocument.createElement("Div");
                    node.setAttribute("Value","/");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node   ;
                :}
                |   AritExpr3:e 
                {:
                    iniXML();
                    RESULT = e;
                :}
                ;

AritExpr3       ::= literal:l
                {:
                    iniXML();
                    RESULT = l; 
                    
                :}
                |   var:v
                {:
                    iniXML();
                    RESULT = v; 
                    
                :}
                |  opUnario:op AritExpr3:e1
                {:
                    iniXML();
                    op.appendChild(e1);
                    RESULT = op;
                :}
                |   ParentesisAbrir AritExpr1:e1 ParentesisCerrar
                {:
                    iniXML();
                    RESULT = e1;
                :}
                ;

BoolExpr1       ::= BoolExpr1:e1 OperadorOr:op BoolExpr2:e2
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("OR");
                    nPadre.setAttribute("Value",op);
                    nPadre.appendChild(e1);
                    nPadre.appendChild(e2);
                    RESULT = nPadre;
                :} 
                |   BoolExpr2:e1
                {:
                    iniXML();
                    RESULT = e1;
                :} 
                ;

BoolExpr2       ::= BoolExpr2:e1 OperadorAnd:op BoolExpr3:e2
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("AND");
                    nPadre.setAttribute("Value",op);
                    nPadre.appendChild(e1);
                    nPadre.appendChild(e2);
                    RESULT = nPadre;
                :} 
                | BoolExpr3:e1
                {:
                    iniXML();
                    RESULT = e1;
                :} 
                ;

BoolExpr3       ::= ParentesisAbrir AritExpr1:e1  opRelacion:op  AritExpr1:e2 ParentesisCerrar
                {:
                    iniXML();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                :} 
                | ParentesisAbrir BoolExpr1:e1 ParentesisCerrar
                {:
                    iniXML();
                    RESULT = e1;
                :}
                | OperadorNot:op BoolExpr3:e1
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("NOT");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    nPadre.appendChild(e1);
                    RESULT = nPadre;
                :}
                ;

opRelacion      ::= OperadorIgual:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Equals");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorDiferente:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Different");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorMayor:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("GreaterThan");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorMenor:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LessThan");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorMenorIgual:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LessOrEqual");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorMayorIgual:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("GreaterOrEqual");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                ;


opArit          ::= OperadorMod:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorDivisionSpecial:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                ;

opUnario        ::= OperadorSuma:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorResta:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :} 
                ;

opLogico        ::= OperadorAnd:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("AND");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorOr:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("OR");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                ;

exprlist        ::= expr:e
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                :}
                |   expr:e Coma exprlist:el
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if (e != null) { nPadre.appendChild(e);}
                    if (el != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = el.getChildNodes();
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                    }
                    RESULT = nPadre;
                :}
                ;

literal         ::= integer:i
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","integer");
                    nPadre.setAttribute("Value",String.valueOf(i.getAttribute("Value")));
                    nPadre.setAttribute("Line", i.getAttribute("Line"));
                    nPadre.setAttribute("Column", i.getAttribute("Column"));
                    RESULT =nPadre;
                :}
                |   character:c
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","char");
                    nPadre.setAttribute("Value",c.getAttribute("Value"));
                    nPadre.setAttribute("Line", c.getAttribute("Line"));
                    nPadre.setAttribute("Column", c.getAttribute("Column"));
                    RESULT =nPadre;
                :}                
                |   boolean:b
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","boolean");
                    nPadre.setAttribute("Value",b.getAttribute("Value"));
                    nPadre.setAttribute("Line", b.getAttribute("Line"));
                    nPadre.setAttribute("Column", b.getAttribute("Column"));
                    RESULT =nPadre;
                :}
                |   string:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","string");
                    nPadre.setAttribute("Value",s.getAttribute("Value"));
                    nPadre.setAttribute("Line", s.getAttribute("Line"));
                    nPadre.setAttribute("Column", s.getAttribute("Column"));
                    RESULT =nPadre;
                :}
                ;

integer         ::= LiteralEntero:i 
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Integer");
                    nPadre.setAttribute("Value",i.toString());
                    nPadre.setAttribute("Size","4");
                    nPadre.setAttribute("Line", ileft + "");
                    nPadre.setAttribute("Column", iright + "");
                    RESULT = nPadre;
                :}
                ;

character       ::= LiteralCaracter:c
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Character");
                    nPadre.setAttribute("Value","\'"+c.toString()+"\'");      
                    nPadre.setAttribute("Line", cleft + "");
                    nPadre.setAttribute("Column", cright + "");      
                    RESULT = nPadre;
                :}
                ;

boolean         ::= LiteralBoolean:b
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Boolean");
                    nPadre.setAttribute("Value",b);    
                    nPadre.setAttribute("Line", bleft + "");
                    nPadre.setAttribute("Column", bright + "");      
                    RESULT = nPadre;
                :}
                ;

string          ::= LiteralString:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("String");
                    nPadre.setAttribute("Value","\'"+s+"\'");
                    nPadre.setAttribute("Line", sleft + "");
                    nPadre.setAttribute("Column", sright  + "");
                    RESULT = nPadre;
                :}
                ;