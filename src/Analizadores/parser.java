
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\012\007\000\002\002\004\000\002\012" +
    "\012\000\002\012\005\000\002\012\007\000\002\013\004" +
    "\000\002\013\004\000\002\014\006\000\002\014\004\000" +
    "\002\015\002\000\002\015\004\000\002\015\004\000\002" +
    "\016\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\004\000\002\023\014\000\002\023\013\000\002\023\004" +
    "\000\002\026\012\000\002\026\011\000\002\026\004\000" +
    "\002\027\002\000\002\027\004\000\002\030\004\000\002" +
    "\024\003\000\002\024\005\000\002\025\006\000\002\025" +
    "\005\000\002\017\002\000\002\017\005\000\002\017\005" +
    "\000\002\017\004\000\002\020\005\000\002\034\003\000" +
    "\002\034\005\000\002\035\003\000\002\035\006\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\012" +
    "\000\002\045\003\000\002\045\005\000\002\045\004\000" +
    "\002\046\002\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\004\000\002\053\005\000\002\053\004\000" +
    "\002\047\005\000\002\047\004\000\002\050\010\000\002" +
    "\050\006\000\002\050\004\000\002\050\005\000\002\021" +
    "\010\000\002\021\007\000\002\021\004\000\002\051\006" +
    "\000\002\051\005\000\002\051\004\000\002\052\006\000" +
    "\002\052\004\000\002\054\006\000\002\054\010\000\002" +
    "\054\004\000\002\055\006\000\002\055\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\005\000\002\002\003" +
    "\000\002\022\006\000\002\022\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\004\000\002\005\005\000\002\006\005" +
    "\000\002\006\003\000\002\007\005\000\002\007\003\000" +
    "\002\010\007\000\002\010\005\000\002\010\004\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\042\003" +
    "\000\002\042\003\000\002\043\003\000\002\043\003\000" +
    "\002\044\003\000\002\044\003\000\002\036\003\000\002" +
    "\036\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\056\003\000\002\057\003" +
    "\000\002\060\003\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\006\003\006\061\004\001\002\000\004\054" +
    "\024\001\002\000\004\002\344\001\002\000\014\003\014" +
    "\010\017\037\ufff8\062\010\063\007\001\002\000\006\003" +
    "\324\054\024\001\002\000\006\003\266\054\024\001\002" +
    "\000\014\003\ufff4\010\ufff4\037\ufff4\062\ufff4\063\ufff4\001" +
    "\002\000\004\065\264\001\002\000\014\003\ufff3\010\ufff3" +
    "\037\ufff3\062\ufff3\063\ufff3\001\002\000\004\040\263\001" +
    "\002\000\014\003\262\010\017\037\ufff8\062\010\063\007" +
    "\001\002\000\006\003\114\037\113\001\002\000\016\003" +
    "\021\010\uffe4\037\uffe4\054\024\062\uffe4\063\uffe4\001\002" +
    "\000\004\066\111\001\002\000\020\003\021\010\uffe4\037" +
    "\uffe4\054\024\062\uffe4\063\uffe4\066\106\001\002\000\010" +
    "\051\uffdf\052\uffdf\060\uffdf\001\002\000\006\051\064\052" +
    "\065\001\002\000\064\003\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\026\uffdd\027\uffdd\030\uffdd\032" +
    "\uffdd\035\uffdd\036\uffdd\040\uffdd\042\uffdd\043\uffdd\046\uffdd" +
    "\047\026\050\uffdd\051\uffdd\052\uffdd\053\uffdd\057\uffdd\060" +
    "\uffdd\066\uffdd\001\002\000\014\003\ufff5\010\ufff5\037\ufff5" +
    "\062\ufff5\063\ufff5\001\002\000\022\026\032\027\047\054" +
    "\024\057\046\067\031\070\033\071\041\072\036\001\002" +
    "\000\056\003\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\026\uff8b\027\uff8b\030\uff8b\032\uff8b\035\uff8b" +
    "\036\uff8b\040\uff8b\042\uff8b\043\uff8b\046\uff8b\050\uff8b\051" +
    "\uff8b\060\uff8b\064\uff8b\066\uff8b\001\002\000\056\003\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\026" +
    "\uff89\027\uff89\030\uff89\032\uff89\035\uff89\036\uff89\040\uff89" +
    "\042\uff89\043\uff89\046\uff89\050\uff89\051\uff89\060\uff89\064" +
    "\uff89\066\uff89\001\002\000\056\003\uff88\015\uff88\016\uff88" +
    "\017\uff88\020\uff88\021\uff88\022\uff88\026\uff88\027\uff88\030" +
    "\uff88\032\uff88\035\uff88\036\uff88\040\uff88\042\uff88\043\uff88" +
    "\046\uff88\050\uff88\051\uff88\060\uff88\064\uff88\066\uff88\001" +
    "\002\000\022\026\uff92\027\uff92\054\uff92\057\uff92\067\uff92" +
    "\070\uff92\071\uff92\072\uff92\001\002\000\056\003\uff87\015" +
    "\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\026\uff87" +
    "\027\uff87\030\uff87\032\uff87\035\uff87\036\uff87\040\uff87\042" +
    "\uff87\043\uff87\046\uff87\050\uff87\051\uff87\060\uff87\064\uff87" +
    "\066\uff87\001\002\000\054\003\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\032\uffa5\035\uffa5\036\uffa5\040\uffa5\042\uffa5\043\uffa5\046" +
    "\uffa5\050\uffa5\051\uffa5\060\uffa5\066\uffa5\001\002\000\022" +
    "\026\032\027\047\054\024\057\046\067\031\070\033\071" +
    "\041\072\036\001\002\000\056\003\uff85\015\uff85\016\uff85" +
    "\017\uff85\020\uff85\021\uff85\022\uff85\026\uff85\027\uff85\030" +
    "\uff85\032\uff85\035\uff85\036\uff85\040\uff85\042\uff85\043\uff85" +
    "\046\uff85\050\uff85\051\uff85\060\uff85\064\uff85\066\uff85\001" +
    "\002\000\056\003\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\026\uff8c\027\uff8c\030\uff8c\032\uff8c\035" +
    "\uff8c\036\uff8c\040\uff8c\042\uff8c\043\uff8c\046\uff8c\050\uff8c" +
    "\051\uff8c\060\uff8c\064\uff8c\066\uff8c\001\002\000\054\003" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\032\uffa6\035\uffa6\036\uffa6\040" +
    "\uffa6\042\uffa6\043\uffa6\046\uffa6\050\uffa6\051\uffa6\060\uffa6" +
    "\066\uffa6\001\002\000\056\003\uff86\015\uff86\016\uff86\017" +
    "\uff86\020\uff86\021\uff86\022\uff86\026\uff86\027\uff86\030\uff86" +
    "\032\uff86\035\uff86\036\uff86\040\uff86\042\uff86\043\uff86\046" +
    "\uff86\050\uff86\051\uff86\060\uff86\064\uff86\066\uff86\001\002" +
    "\000\054\003\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\026\uffa9\027\uffa9\030\056\032\055\035\uffa9" +
    "\036\uffa9\040\uffa9\042\uffa9\043\uffa9\046\uffa9\050\uffa9\051" +
    "\uffa9\060\uffa9\066\uffa9\001\002\000\010\026\051\027\052" +
    "\050\062\001\002\000\054\003\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\032\uffa4\035\uffa4\036\uffa4\040\uffa4\042\uffa4\043\uffa4\046" +
    "\uffa4\050\uffa4\051\uffa4\060\uffa4\066\uffa4\001\002\000\056" +
    "\003\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\026\uff8a\027\uff8a\030\uff8a\032\uff8a\035\uff8a\036\uff8a" +
    "\040\uff8a\042\uff8a\043\uff8a\046\uff8a\050\uff8a\051\uff8a\060" +
    "\uff8a\064\uff8a\066\uff8a\001\002\000\022\026\032\027\047" +
    "\054\024\057\046\067\031\070\033\071\041\072\036\001" +
    "\002\000\022\026\uff91\027\uff91\054\uff91\057\uff91\067\uff91" +
    "\070\uff91\071\uff91\072\uff91\001\002\000\010\026\051\027" +
    "\052\060\053\001\002\000\022\026\032\027\047\054\024" +
    "\057\046\067\031\070\033\071\041\072\036\001\002\000" +
    "\022\026\032\027\047\054\024\057\046\067\031\070\033" +
    "\071\041\072\036\001\002\000\054\003\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\032\uffa2\035\uffa2\036\uffa2\040\uffa2\042\uffa2\043" +
    "\uffa2\046\uffa2\050\uffa2\051\uffa2\060\uffa2\066\uffa2\001\002" +
    "\000\054\003\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\026\uffaa\027\uffaa\030\056\032\055\035\uffaa" +
    "\036\uffaa\040\uffaa\042\uffaa\043\uffaa\046\uffaa\050\uffaa\051" +
    "\uffaa\060\uffaa\066\uffaa\001\002\000\022\026\032\027\047" +
    "\054\024\057\046\067\031\070\033\071\041\072\036\001" +
    "\002\000\022\026\032\027\047\054\024\057\046\067\031" +
    "\070\033\071\041\072\036\001\002\000\054\003\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\032\uffa8\035\uffa8\036\uffa8\040\uffa8\042" +
    "\uffa8\043\uffa8\046\uffa8\050\uffa8\051\uffa8\060\uffa8\066\uffa8" +
    "\001\002\000\054\003\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\026\uffa7\027\uffa7\030\uffa7\032\uffa7" +
    "\035\uffa7\036\uffa7\040\uffa7\042\uffa7\043\uffa7\046\uffa7\050" +
    "\uffa7\051\uffa7\060\uffa7\066\uffa7\001\002\000\054\003\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\026" +
    "\uffab\027\uffab\030\056\032\055\035\uffab\036\uffab\040\uffab" +
    "\042\uffab\043\uffab\046\uffab\050\uffab\051\uffab\060\uffab\066" +
    "\uffab\001\002\000\062\003\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\026\uffdc\027\uffdc\030\uffdc\032" +
    "\uffdc\035\uffdc\036\uffdc\040\uffdc\042\uffdc\043\uffdc\046\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\057\uffdc\060\uffdc\066" +
    "\uffdc\001\002\000\054\003\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\026\uffa3\027\uffa3\030\uffa3\032" +
    "\uffa3\035\uffa3\036\uffa3\040\uffa3\042\uffa3\043\uffa3\046\uffa3" +
    "\050\uffa3\051\uffa3\060\uffa3\066\uffa3\001\002\000\004\054" +
    "\024\001\002\000\014\006\071\011\070\012\075\013\074" +
    "\014\073\001\002\000\004\066\uffdb\001\002\000\004\066" +
    "\uffda\001\002\000\006\060\uffd7\066\uffd7\001\002\000\004" +
    "\047\076\001\002\000\004\066\uffe0\001\002\000\006\060" +
    "\uffd8\066\uffd8\001\002\000\006\060\uffd6\066\uffd6\001\002" +
    "\000\006\060\uffd9\066\uffd9\001\002\000\012\067\031\070" +
    "\033\071\041\072\036\001\002\000\004\064\100\001\002" +
    "\000\012\067\031\070\033\071\041\072\036\001\002\000" +
    "\004\050\102\001\002\000\004\007\103\001\002\000\012" +
    "\011\070\012\075\013\074\014\073\001\002\000\004\066" +
    "\uffd5\001\002\000\010\051\uffde\052\uffde\060\uffde\001\002" +
    "\000\016\003\021\010\uffe4\037\uffe4\054\024\062\uffe4\063" +
    "\uffe4\001\002\000\014\003\uffe1\010\uffe1\037\uffe1\062\uffe1" +
    "\063\uffe1\001\002\000\014\003\uffe2\010\uffe2\037\uffe2\062" +
    "\uffe2\063\uffe2\001\002\000\016\003\021\010\uffe4\037\uffe4" +
    "\054\024\062\uffe4\063\uffe4\001\002\000\014\003\uffe3\010" +
    "\uffe3\037\uffe3\062\uffe3\063\uffe3\001\002\000\030\003\132" +
    "\004\117\005\140\034\131\037\113\040\uffd1\041\120\044" +
    "\135\045\122\054\024\066\uffd1\001\002\000\006\003\ufff6" +
    "\037\ufff6\001\002\000\006\003\116\065\ufffc\001\002\000" +
    "\016\003\uffc5\036\uffc5\040\uffc5\046\uffc5\065\uffc5\066\uffc5" +
    "\001\002\000\004\057\253\001\002\000\004\054\024\001" +
    "\002\000\014\003\244\036\uffcd\040\uffcd\046\uffcd\066\uffcd" +
    "\001\002\000\030\003\132\004\117\005\140\034\131\037" +
    "\113\041\120\044\135\045\122\046\uffd1\054\024\066\uffd1" +
    "\001\002\000\014\003\240\036\uffcc\040\uffcc\046\uffcc\066" +
    "\uffcc\001\002\000\014\003\uffc9\036\uffc9\040\uffc9\046\uffc9" +
    "\066\uffc9\001\002\000\014\003\116\036\uffc8\040\uffc8\046" +
    "\uffc8\066\uffc8\001\002\000\014\003\uffd0\036\uffd0\040\uffd0" +
    "\046\uffd0\066\uffd0\001\002\000\014\003\237\036\uffcf\040" +
    "\uffcf\046\uffcf\066\uffcf\001\002\000\004\040\236\001\002" +
    "\000\024\025\153\026\032\027\047\054\024\057\162\067" +
    "\031\070\033\071\041\072\036\001\002\000\036\003\132" +
    "\004\117\005\140\034\131\036\224\037\113\040\uffd1\041" +
    "\120\044\135\045\122\046\uffd1\054\024\060\225\066\uffd1" +
    "\001\002\000\014\003\223\036\uffce\040\uffce\046\uffce\066" +
    "\uffce\001\002\000\006\053\221\057\205\001\002\000\024" +
    "\025\153\026\032\027\047\054\024\057\162\067\031\070" +
    "\033\071\041\072\036\001\002\000\014\003\151\036\uffca" +
    "\040\uffca\046\uffca\066\uffca\001\002\000\012\003\146\040" +
    "\uffd4\046\uffd4\066\147\001\002\000\004\057\143\001\002" +
    "\000\014\003\142\036\uffcb\040\uffcb\046\uffcb\066\uffcb\001" +
    "\002\000\014\003\uffb7\036\uffb7\040\uffb7\046\uffb7\066\uffb7" +
    "\001\002\000\004\054\024\001\002\000\004\060\145\001" +
    "\002\000\014\003\uffb3\036\uffb3\040\uffb3\046\uffb3\066\uffb3" +
    "\001\002\000\014\003\uffc7\036\uffc7\040\uffc7\046\uffc7\066" +
    "\uffc7\001\002\000\032\003\132\004\117\005\140\034\131" +
    "\037\113\040\uffd1\041\120\044\135\045\122\046\uffd1\054" +
    "\024\066\uffd1\001\002\000\006\040\uffd3\046\uffd3\001\002" +
    "\000\014\003\uffb2\036\uffb2\040\uffb2\046\uffb2\066\uffb2\001" +
    "\002\000\004\043\217\001\002\000\006\025\153\057\170" +
    "\001\002\000\026\003\uffae\035\uffae\036\uffae\040\uffae\042" +
    "\uffae\043\uffae\046\uffae\051\uffae\060\uffae\066\uffae\001\002" +
    "\000\046\003\uffb1\015\173\016\176\017\172\020\200\021" +
    "\177\022\175\026\051\027\052\035\uffb1\036\uffb1\040\uffb1" +
    "\042\uffb1\043\uffb1\046\uffb1\051\uffb1\060\uffb1\066\uffb1\001" +
    "\002\000\054\003\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\026\uffa4\027\uffa4\030\uffa4\032\uffa4\035" +
    "\uffa4\036\uffa4\040\uffa4\042\uffa4\043\uffa4\046\uffa4\051\uffa4" +
    "\057\205\060\uffa4\066\uffa4\001\002\000\032\003\uff9e\023" +
    "\uff9e\024\uff9e\035\uff9e\036\uff9e\040\uff9e\042\uff9e\043\uff9e" +
    "\046\uff9e\051\uff9e\060\uff9e\066\uff9e\001\002\000\032\003" +
    "\uffa0\023\203\024\uffa0\035\uffa0\036\uffa0\040\uffa0\042\uffa0" +
    "\043\uffa0\046\uffa0\051\uffa0\060\uffa0\066\uffa0\001\002\000" +
    "\030\003\uffb0\024\165\035\uffb0\036\uffb0\040\uffb0\042\uffb0" +
    "\043\uffb0\046\uffb0\051\uffb0\060\uffb0\066\uffb0\001\002\000" +
    "\024\025\153\026\032\027\047\054\024\057\162\067\031" +
    "\070\033\071\041\072\036\001\002\000\024\015\173\016" +
    "\176\017\172\020\200\021\177\022\175\026\051\027\052" +
    "\060\053\001\002\000\006\024\165\060\166\001\002\000" +
    "\006\025\153\057\170\001\002\000\032\003\uff9c\023\uff9c" +
    "\024\uff9c\035\uff9c\036\uff9c\040\uff9c\042\uff9c\043\uff9c\046" +
    "\uff9c\051\uff9c\060\uff9c\066\uff9c\001\002\000\032\003\uffa1" +
    "\023\203\024\uffa1\035\uffa1\036\uffa1\040\uffa1\042\uffa1\043" +
    "\uffa1\046\uffa1\051\uffa1\060\uffa1\066\uffa1\001\002\000\024" +
    "\025\153\026\032\027\047\054\024\057\162\067\031\070" +
    "\033\071\041\072\036\001\002\000\022\015\173\016\176" +
    "\017\172\020\200\021\177\022\175\026\051\027\052\001" +
    "\002\000\022\026\uff98\027\uff98\054\uff98\057\uff98\067\uff98" +
    "\070\uff98\071\uff98\072\uff98\001\002\000\022\026\uff9a\027" +
    "\uff9a\054\uff9a\057\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a" +
    "\001\002\000\022\026\032\027\047\054\024\057\046\067" +
    "\031\070\033\071\041\072\036\001\002\000\022\026\uff96" +
    "\027\uff96\054\uff96\057\uff96\067\uff96\070\uff96\071\uff96\072" +
    "\uff96\001\002\000\022\026\uff99\027\uff99\054\uff99\057\uff99" +
    "\067\uff99\070\uff99\071\uff99\072\uff99\001\002\000\022\026" +
    "\uff95\027\uff95\054\uff95\057\uff95\067\uff95\070\uff95\071\uff95" +
    "\072\uff95\001\002\000\022\026\uff97\027\uff97\054\uff97\057" +
    "\uff97\067\uff97\070\uff97\071\uff97\072\uff97\001\002\000\010" +
    "\026\051\027\052\060\202\001\002\000\032\003\uff9d\023" +
    "\uff9d\024\uff9d\035\uff9d\036\uff9d\040\uff9d\042\uff9d\043\uff9d" +
    "\046\uff9d\051\uff9d\060\uff9d\066\uff9d\001\002\000\006\025" +
    "\153\057\170\001\002\000\032\003\uff9f\023\uff9f\024\uff9f" +
    "\035\uff9f\036\uff9f\040\uff9f\042\uff9f\043\uff9f\046\uff9f\051" +
    "\uff9f\060\uff9f\066\uff9f\001\002\000\026\025\153\026\032" +
    "\027\047\054\024\057\162\060\210\067\031\070\033\071" +
    "\041\072\036\001\002\000\004\060\213\001\002\000\006" +
    "\051\211\060\uff8e\001\002\000\026\003\uffac\035\uffac\036" +
    "\uffac\040\uffac\042\uffac\043\uffac\046\uffac\051\uffac\060\uffac" +
    "\066\uffac\001\002\000\024\025\153\026\032\027\047\054" +
    "\024\057\162\067\031\070\033\071\041\072\036\001\002" +
    "\000\004\060\uff8d\001\002\000\026\003\uffad\035\uffad\036" +
    "\uffad\040\uffad\042\uffad\043\uffad\046\uffad\051\uffad\060\uffad" +
    "\066\uffad\001\002\000\022\026\032\027\047\054\024\057" +
    "\046\067\031\070\033\071\041\072\036\001\002\000\032" +
    "\003\uffaf\026\051\027\052\035\uffaf\036\uffaf\040\uffaf\042" +
    "\uffaf\043\uffaf\046\uffaf\051\uffaf\060\uffaf\066\uffaf\001\002" +
    "\000\032\003\uff9b\023\uff9b\024\uff9b\035\uff9b\036\uff9b\040" +
    "\uff9b\042\uff9b\043\uff9b\046\uff9b\051\uff9b\060\uff9b\066\uff9b" +
    "\001\002\000\016\003\uffba\036\uffba\037\113\040\uffba\046" +
    "\uffba\066\uffba\001\002\000\014\003\116\036\uffbb\040\uffbb" +
    "\046\uffbb\066\uffbb\001\002\000\024\025\153\026\032\027" +
    "\047\054\024\057\162\067\031\070\033\071\041\072\036" +
    "\001\002\000\016\003\uffc4\036\uffc4\040\uffc4\042\uffc4\046" +
    "\uffc4\066\uffc4\001\002\000\014\003\uffc0\036\uffc0\040\uffc0" +
    "\046\uffc0\066\uffc0\001\002\000\034\003\227\004\117\005" +
    "\140\034\131\036\uffd1\037\113\040\uffd1\041\120\044\135" +
    "\045\122\046\uffd1\054\024\066\uffd1\001\002\000\014\003" +
    "\uffb4\036\uffb4\040\uffb4\046\uffb4\066\uffb4\001\002\000\006" +
    "\040\uffd2\046\uffd2\001\002\000\006\036\224\060\225\001" +
    "\002\000\014\003\146\036\uffbf\040\uffbf\046\uffbf\066\uffbf" +
    "\001\002\000\004\035\232\001\002\000\034\003\227\004" +
    "\117\005\140\034\131\036\uffd1\037\113\040\uffd1\041\120" +
    "\044\135\045\122\046\uffd1\054\024\066\uffd1\001\002\000" +
    "\014\003\146\036\234\040\uffc1\046\uffc1\066\uffc1\001\002" +
    "\000\034\003\227\004\117\005\140\034\131\036\uffd1\037" +
    "\113\040\uffd1\041\120\044\135\045\122\046\uffd1\054\024" +
    "\066\uffd1\001\002\000\014\003\146\036\uffc2\040\uffc2\046" +
    "\uffc2\066\uffc2\001\002\000\016\003\uffc6\036\uffc6\040\uffc6" +
    "\046\uffc6\065\uffc6\066\uffc6\001\002\000\016\003\uffc3\036" +
    "\uffc3\040\uffc3\042\uffc3\046\uffc3\066\uffc3\001\002\000\014" +
    "\003\uffb9\036\uffb9\040\uffb9\046\uffb9\066\uffb9\001\002\000" +
    "\004\046\242\001\002\000\024\025\153\026\032\027\047" +
    "\054\024\057\162\067\031\070\033\071\041\072\036\001" +
    "\002\000\014\003\uffb8\036\uffb8\040\uffb8\046\uffb8\066\uffb8" +
    "\001\002\000\014\003\uffbc\036\uffbc\040\uffbc\046\uffbc\066" +
    "\uffbc\001\002\000\004\053\221\001\002\000\006\003\237" +
    "\042\247\001\002\000\024\025\153\026\032\027\047\054" +
    "\024\057\162\067\031\070\033\071\041\072\036\001\002" +
    "\000\004\043\251\001\002\000\016\003\uffbd\036\uffbd\037" +
    "\113\040\uffbd\046\uffbd\066\uffbd\001\002\000\014\003\116" +
    "\036\uffbe\040\uffbe\046\uffbe\066\uffbe\001\002\000\004\072" +
    "\036\001\002\000\006\051\255\060\256\001\002\000\004" +
    "\054\024\001\002\000\014\003\uffb6\036\uffb6\040\uffb6\046" +
    "\uffb6\066\uffb6\001\002\000\004\060\260\001\002\000\014" +
    "\003\uffb5\036\uffb5\040\uffb5\046\uffb5\066\uffb5\001\002\000" +
    "\006\003\114\037\ufff7\001\002\000\014\003\ufff2\010\ufff2" +
    "\037\ufff2\062\ufff2\063\ufff2\001\002\000\006\003\ufffb\065" +
    "\ufffb\001\002\000\004\002\ufffe\001\002\000\004\057\267" +
    "\001\002\000\014\003\uffec\010\uffec\037\uffec\062\uffec\063" +
    "\uffec\001\002\000\010\010\274\054\024\060\272\001\002" +
    "\000\006\060\uffe8\066\322\001\002\000\004\060\316\001" +
    "\002\000\004\066\302\001\002\000\006\051\064\052\300" +
    "\001\002\000\004\054\024\001\002\000\006\051\064\052" +
    "\276\001\002\000\012\011\070\012\075\013\074\014\073" +
    "\001\002\000\006\060\uffe6\066\uffe6\001\002\000\012\011" +
    "\070\012\075\013\074\014\073\001\002\000\006\060\uffe5" +
    "\066\uffe5\001\002\000\006\010\306\037\uffeb\001\002\000" +
    "\006\003\314\066\315\001\002\000\004\037\311\001\002" +
    "\000\006\010\306\037\uffeb\001\002\000\012\003\021\010" +
    "\uffe4\037\uffe4\054\024\001\002\000\006\010\uffe9\037\uffe9" +
    "\001\002\000\004\037\uffea\001\002\000\030\003\132\004" +
    "\117\005\140\034\131\037\113\040\uffd1\041\120\044\135" +
    "\045\122\054\024\066\uffd1\001\002\000\004\040\313\001" +
    "\002\000\006\003\ufffa\066\ufffa\001\002\000\006\003\ufff9" +
    "\066\ufff9\001\002\000\014\003\uffed\010\uffed\037\uffed\062" +
    "\uffed\063\uffed\001\002\000\004\066\317\001\002\000\006" +
    "\010\306\037\uffeb\001\002\000\006\003\314\066\321\001" +
    "\002\000\014\003\uffee\010\uffee\037\uffee\062\uffee\063\uffee" +
    "\001\002\000\006\010\274\054\024\001\002\000\004\060" +
    "\uffe7\001\002\000\014\003\uffef\010\uffef\037\uffef\062\uffef" +
    "\063\uffef\001\002\000\004\057\326\001\002\000\010\010" +
    "\274\054\024\060\330\001\002\000\004\060\336\001\002" +
    "\000\004\052\331\001\002\000\014\006\071\011\070\012" +
    "\075\013\074\014\073\001\002\000\004\066\333\001\002" +
    "\000\006\010\306\037\uffeb\001\002\000\006\003\314\066" +
    "\335\001\002\000\014\003\ufff0\010\ufff0\037\ufff0\062\ufff0" +
    "\063\ufff0\001\002\000\004\052\337\001\002\000\014\006" +
    "\071\011\070\012\075\013\074\014\073\001\002\000\004" +
    "\066\341\001\002\000\006\010\306\037\uffeb\001\002\000" +
    "\006\003\314\066\343\001\002\000\014\003\ufff1\010\ufff1" +
    "\037\ufff1\062\ufff1\063\ufff1\001\002\000\004\002\000\001" +
    "\002\000\006\057\346\066\347\001\002\000\004\054\024" +
    "\001\002\000\014\003\014\010\017\037\ufff8\062\010\063" +
    "\007\001\002\000\006\003\351\065\352\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\001\001\002\000\006\051" +
    "\064\060\354\001\002\000\004\066\355\001\002\000\014" +
    "\003\014\010\017\037\ufff8\062\010\063\007\001\002\000" +
    "\004\065\357\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\012\004\001\001\000\004\035\344\001" +
    "\001\000\002\001\001\000\014\013\011\015\015\016\014" +
    "\023\010\026\012\001\001\000\004\035\324\001\001\000" +
    "\004\035\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\260\016" +
    "\014\023\010\026\012\001\001\000\004\053\114\001\001" +
    "\000\012\017\024\020\017\034\022\035\021\001\001\000" +
    "\002\001\001\000\012\017\106\020\017\034\022\035\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\042\004\041\005\037" +
    "\011\033\035\043\043\034\056\036\057\026\060\044\061" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\062\011\033\035\043\043\034\056\036" +
    "\057\026\060\044\061\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\047\004\041\005\037\011\033\035\043" +
    "\043\034\056\036\057\026\060\044\061\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\060\005\037" +
    "\011\033\035\043\043\034\056\036\057\026\060\044\061" +
    "\027\001\001\000\024\004\053\005\037\011\033\035\043" +
    "\043\034\056\036\057\026\060\044\061\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\057\011\033" +
    "\035\043\043\034\056\036\057\026\060\044\061\027\001" +
    "\001\000\022\005\056\011\033\035\043\043\034\056\036" +
    "\057\026\060\044\061\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\104\001\001\000\010\031\071\032" +
    "\065\033\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\076\056\036\057\026\060\044\061\027\001\001\000" +
    "\002\001\001\000\014\011\100\056\036\057\026\060\044" +
    "\061\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\107\020\017\034\022\035\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\111\020\017" +
    "\034\022\035\021\001\001\000\002\001\001\000\032\021" +
    "\120\022\125\035\133\045\127\046\136\047\126\050\132" +
    "\051\122\052\140\053\124\054\123\055\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\244\047\245\001\001\000\002\001" +
    "\001\000\032\021\120\022\125\035\133\045\240\046\136" +
    "\047\126\050\132\051\122\052\140\053\124\054\123\055" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\230\003\154\004\041\005\037\006\160" +
    "\007\157\010\156\011\033\022\153\035\155\043\034\056" +
    "\036\057\026\060\044\061\027\001\001\000\032\021\120" +
    "\022\125\035\133\045\225\046\136\047\126\050\132\051" +
    "\122\052\140\053\124\054\123\055\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\151\003\154\004" +
    "\041\005\037\006\160\007\157\010\156\011\033\022\153" +
    "\035\155\043\034\056\036\057\026\060\044\061\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\021\120\022\125\035\133\045\147\046\136\047" +
    "\126\050\132\051\122\052\140\053\124\054\123\055\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\215\001\001\000\002\001\001\000\004" +
    "\041\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\162\004\041" +
    "\005\037\006\163\007\157\010\156\011\033\035\043\043" +
    "\034\056\036\057\026\060\044\061\027\001\001\000\004" +
    "\041\173\001\001\000\002\001\001\000\006\007\166\010" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\170\004\041\005\037\006\163\007\157\010\156\011" +
    "\033\035\043\043\034\056\036\057\026\060\044\061\027" +
    "\001\001\000\004\041\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\200\004\041\005\037\011\033" +
    "\035\043\043\034\056\036\057\026\060\044\061\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\203\001\001\000\002\001\001\000\042\002\206" +
    "\003\154\004\041\005\037\006\160\007\157\010\156\011" +
    "\033\022\153\035\155\036\205\043\034\056\036\057\026" +
    "\060\044\061\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\002\206\003\154\004\041" +
    "\005\037\006\160\007\157\010\156\011\033\022\153\035" +
    "\155\036\211\043\034\056\036\057\026\060\044\061\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\214\004\041\005\037\011\033\035\043\043\034\056\036" +
    "\057\026\060\044\061\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\217\001\001\000\002\001\001" +
    "\000\040\002\221\003\154\004\041\005\037\006\160\007" +
    "\157\010\156\011\033\022\153\035\155\043\034\056\036" +
    "\057\026\060\044\061\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\021\120\022\125\035\133\046\227" +
    "\047\126\050\132\051\122\052\140\053\124\054\123\055" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\021" +
    "\120\022\125\035\133\046\232\047\126\050\132\051\122" +
    "\052\140\053\124\054\123\055\135\001\001\000\002\001" +
    "\001\000\030\021\120\022\125\035\133\046\234\047\126" +
    "\050\132\051\122\052\140\053\124\054\123\055\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\242\003" +
    "\154\004\041\005\037\006\160\007\157\010\156\011\033" +
    "\022\153\035\155\043\034\056\036\057\026\060\044\061" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\247\003\154\004" +
    "\041\005\037\006\160\007\157\010\156\011\033\022\153" +
    "\035\155\043\034\056\036\057\026\060\044\061\027\001" +
    "\001\000\002\001\001\000\004\053\251\001\001\000\002" +
    "\001\001\000\004\061\253\001\001\000\002\001\001\000" +
    "\004\035\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\270\025\267\034\272\035\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\274\035\021\001\001\000" +
    "\002\001\001\000\004\032\276\001\001\000\002\001\001" +
    "\000\004\032\300\001\001\000\002\001\001\000\010\014" +
    "\302\027\303\030\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\307\030\304\001\001\000\012\017" +
    "\306\020\017\034\022\035\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\021\120\022\125\035\133\045" +
    "\311\046\136\047\126\050\132\051\122\052\140\053\124" +
    "\054\123\055\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\317\027\303\030\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\322\025\267\034\272" +
    "\035\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\326\025\267\034\272\035\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\331\032\065\033\066\001\001\000\002\001\001\000\010" +
    "\014\333\027\303\030\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\337\032\065" +
    "\033\066\001\001\000\002\001\001\000\010\014\341\027" +
    "\303\030\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\352\035" +
    "\021\001\001\000\014\013\347\015\015\016\014\023\010" +
    "\026\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\355\015\015\016\014\023\010\026\012\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        @Override
	public void report_error(String message, Object info) {
            System.err.print("Syntax error: " ); 
            expected();
            System.err.println("pero se encontró el token \'" + ((Symbol)info).value + "\' en la Linea: " + ((Symbol)info).left + ", Columna: " + ((Symbol)info).right + ". " ); 
        }

        @Override
	public void syntax_error(Symbol s){
            System.err.print("Error Sintáctico: " ); 
            expected();
            System.err.println("pero se encontró el token \'" + sym.terminalNames[s.sym] + "\' en la Linea: " + s.left + ", Columna: " + s.right + ". " ); 
	}

    public void expected(){
        List<Integer> token_list = this.expected_token_ids();
        if (token_list.size() <= 0){
                token_list = this.expected_token_ids();
        }
        String expected_tokens = "";
        for (int i = 0 ; i < token_list.size(); i++){
                int id = token_list.get(i);
                if (id == 1){ //error
                    continue;
                }
                String terminal_name = sym.terminalNames[id];
                if (i == token_list.size() - 1){
                    expected_tokens += terminal_name;
                }else{
                    expected_tokens += terminal_name + " , ";
                }
        }
        System.err.print("Se esperaba alguno de los siguientes tokens: [" + expected_tokens + "] ");
    };

    public void report_fatal_error(String message, Object info) {
        throw new Error("Error Fatal Sintáctico, no se pudo recuperar del problema.");
    }

    public void unrecovered_syntax_error(Symbol s) {
    }

    @Override
    public int error_sync_size(){
        return 1;
    }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    TablaSimbolos ts = new TablaSimbolos();
    int offset = 0;
    String ambito = "main";

    /* Contruccion del arbol en XML */

    Document xmlDocument = null;    
    Element nodoPadre = null; 

    private void iniXML() {
        if (xmlDocument == null) {
            try {
                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                xmlDocument = docBuilder.newDocument();//Crear el documento XML
            } catch (Exception e) {
                System.err.println("El arbol tiene Error: " + e.getMessage());
            }
        }
    }

    public void escribirXML() throws javax.xml.transform.TransformerConfigurationException, javax.xml.transform.TransformerException {
        //Escribir el archivo XML         
        xmlDocument.appendChild(nodoPadre);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource origen = new DOMSource(xmlDocument);
        StreamResult result = new StreamResult(new File("AST.xml"));
        transformer.transform(origen, result);
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= Program var PuntoComa block Punto 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (v != null) { nodoPadre.appendChild(v); }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                    SemanticParser.llenarTablaSimbolos(nodoPadre);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element start_val = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Program var ParentesisAbrir vars ParentesisCerrar PuntoComa block Punto 
            {
              Element RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Element v1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (v1 != null) { nodoPadre.appendChild(v1); }
                    if (vs != null) { 
                        Element nPadre = xmlDocument.createElement("ProgramArgs");
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = vs.getChildNodes();
                        if (temp.getLength() > 0) {
                            Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                            asd.add((Element) parent);
                        }
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                        nodoPadre.appendChild(nPadre);
                    }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                    SemanticParser.llenarTablaSimbolos(nodoPadre);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error block Punto 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= Program var PuntoComa block error 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= decls blockstmt 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (d != null) { nPadre.appendChild(d); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= error End 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // blockProc ::= procInlineDecls Begin stmts End 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (p != null) { nPadre.appendChild(p); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockProc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // blockProc ::= blockProc error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockProc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decls ::= decl decls 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element ds = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declarations");
                    if (d != null && ds == null) {
                        RESULT = d;
                    } else if (d == null && ds != null){
                        RESULT = ds;
                    } else if (d != null && ds != null) {
                        nPadre.appendChild(d);
                        if (!ds.getNodeName().equals("Declarations")) {
                            nPadre.appendChild(ds);
                        }else{
                            Element nodoPadre = xmlDocument.createElement("ProgramArgs");
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = ds.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                            nodoPadre.appendChild(nPadre);
                        }
                       
                        RESULT = nPadre;
                    } else{ RESULT = null; }      
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decls ::= decls error 
            {
              Element RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element ds = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = vd;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= functionDecl 
            {
              Element RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element f = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = f;
                                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl ::= procedureDecl 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = p;                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= decl error 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functionDecl ::= Function var ParentesisAbrir inlineArgs ParentesisCerrar DosPuntos type PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    nPadre.setAttribute("Type", t.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functionDecl ::= Function var ParentesisAbrir ParentesisCerrar DosPuntos type PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    nPadre.setAttribute("Type", t.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functionDecl ::= Function error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedureDecl ::= Procedure var ParentesisAbrir inlineArgs ParentesisCerrar PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedureDecl ::= Procedure var ParentesisAbrir ParentesisCerrar PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML(); 
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedureDecl ::= Procedure error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procInlineDecls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procInlineDecls ::= procInlineDecl procInlineDecls 
            {
              Element RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element pd = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element pds = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcInlinceDecls");
                    if (pd != null && pds == null) {
                        RESULT = pd;
                    } else if(pd == null && pds != null) {
                        RESULT = pds;
                    } else if(pd != null && pds != null) {
                        nPadre.appendChild(pd);
                        nPadre.appendChild(pds);
                        RESULT = nPadre;
                    } else RESULT = null;               
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procInlineDecl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = vd;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procInlineDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inlineArgs ::= inlineArg 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    nPadre.appendChild(ia);
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inlineArgs ::= inlineArg PuntoComa inlineArgs 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element ias = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    nPadre.appendChild(ia);
                    ArrayList<Element> asd = new ArrayList();
                    NodeList temp = ias.getChildNodes();
                    for (int i = 0; i < temp.getLength(); i++) {
                        asd.add((Element) temp.item(i));
                    }
                    for (int i = 0; i < asd.size(); i++) {
                        nPadre.appendChild(asd.get(i));
                    }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inlineArg ::= Var vars DosPuntos identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",t);
                        String size = "";
                        if(t.equals("integer")){
                            size = "4";
                        } else if(t.equals("boolean")){
                            size = "1";
                        } else if(t.equals("char")){
                            size = "1";
                        } else if(t.equals("string")){
                            size = "4";
                        }
                        nType.setAttribute("Size",size);
                        nType.setAttribute("isPointer","true");
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlineArg",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inlineArg ::= vars DosPuntos identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                       ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",t);
                        String size = "";
                        if(t.equals("integer")){
                            size = "4";
                        } else if(t.equals("boolean")){
                            size = "1";
                        } else if(t.equals("char")){
                            size = "1";
                        } else if(t.equals("string")){
                            size = "4";
                        }
                        nType.setAttribute("Size",size);
                        nType.setAttribute("isPointer","false");
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlineArg",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vardecls ::= 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vardecls ::= vardecl PuntoComa vardecls 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    if(v != null && vs == null ){
                        RESULT = v;
                    } else if(v == null && vs != null){
                        Element nPadre = xmlDocument.createElement("VarDeclaration");
                        nPadre.appendChild(vs);
                        RESULT = nPadre;
                    } else if(v != null && vs != null){
                        Element nPadre = xmlDocument.createElement("VarDeclarations");
                        nPadre.appendChild(v);
                        if (vs.getNodeName().equals("VarDeclaration")) {
                            nPadre.appendChild(vs);
                        } else {
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = vs.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vardecls ::= error PuntoComa vardecls 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vardecls ::= error vardecls 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vardecl ::= vars DosPuntos type 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarDeclaration");
                    if (vs != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                String id = asd.get(i).getAttribute("Value");
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    nPadre.appendChild(t);
                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vars ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = v;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vars ::= vars Coma var 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    vs.appendChild(v);
                    RESULT = vs;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= Identificador 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ID");
                    nPadre.setAttribute("Value",i);
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= Identificador BracketAbrir AritExpr1 BracketCerrar 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ARRAY");
                    nPadre.setAttribute("Value",i);
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    nPadre.appendChild(e1);
                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= identtype 
            {
              Element RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(it != null) {
                        nPadre.setAttribute("Value",it);
                        String size = "";
                        if(it.equals("integer")){
                            size = "4";
                        } else if(it.equals("boolean")){
                            size = "1";
                        } else if(it.equals("char")){
                            size = "1";
                        } else if(it.equals("string")){
                            size = "4";
                        }

                        nPadre.setAttribute("Size",size);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= arraytype 
            {
              Element RESULT =null;
		int atsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element ats = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(ats != null) {
                        nPadre.setAttribute("Value",ats.getAttribute("Value"));
                        nPadre.setAttribute("Size",ats.getAttribute("Size"));
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identtype ::= TipoChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // identtype ::= TipoString 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // identtype ::= TipoBoolean 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // identtype ::= TipoInteger 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arraytype ::= Array BracketAbrir literal PuntoPunto literal BracketCerrar Of identtype 
            {
              Element RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Element l1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element l2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArrayType");
                    if(t != null){
                        nPadre.setAttribute("Value","Array."+t+"."+l1.getAttribute("Value")+"."+l2.getAttribute("Value"));
                        int size = 0;
                        if(t.equals("integer")){
                            size = 4;
                        } else if(t.equals("boolean")){
                            size = 1;
                        } else if(t.equals("char")){
                            size = 1;
                        } else if(t.equals("string")){
                            size = 4;
                        }
                        int temp1 = Integer.parseInt(l1.getAttribute("Value"));
                        int temp2 = Integer.parseInt(l2.getAttribute("Value"));
                        nPadre.setAttribute("Size", ((temp2-temp1+1)*size)+"");
                    }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraytype",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmts ::= stmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statements");
                    if (s != null) { nPadre.appendChild(s); RESULT = nPadre;}
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmts ::= stmt PuntoComa stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element ss = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Element nPadre = xmlDocument.createElement("Statements");
                    iniXML();
                    if(s != null && ss == null){
                        RESULT = s;
                    } else if(s == null && ss != null){
                        RESULT = ss;
                    } else if(s != null && ss != null){
                        nPadre.appendChild(s);
                        nPadre.appendChild(ss);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmts ::= error stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= FunctionCall 
            {
              Element RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element fc = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = fc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= assignstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();               
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= ifstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();              
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= forstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();             
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= whilestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();   
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= repeatstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();          
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= readstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();          
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= writestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();       
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= blockstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();             
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= stmt error 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // blockstmt ::= Begin stmts End 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Body");
                    if (s != null) { nPadre.appendChild(s); }             
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockstmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // blockstmt ::= blockstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockstmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignstmt ::= var DosPuntosIgual expr 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Assignment");
                    if (i != null) { nPadre.appendChild(i); }
                    if (e != null) { nPadre.appendChild(e); }                   
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignstmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignstmt ::= assignstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignstmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ifstmt ::= If expr Then stmt Else stmt 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    if (s2 != null) { nPadre.appendChild(s2); }

                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ifstmt ::= If expr Then stmt 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ifstmt ::= ifstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ifstmt ::= error Else stmt 
            {
              Element RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // forstmt ::= For assignstmt To expr Do blockstmt 
            {
              Element RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // forstmt ::= For assignstmt To expr Do 
            {
              Element RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // forstmt ::= forstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // whilestmt ::= While expr Do blockstmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // whilestmt ::= While expr Do 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // whilestmt ::= whilestmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // repeatstmt ::= Repeat stmts Until expr 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RepeatStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeatstmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // repeatstmt ::= repeatstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeatstmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // writestmt ::= Write ParentesisAbrir string ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // writestmt ::= Write ParentesisAbrir string Coma var ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // writestmt ::= error ParentesisCerrar 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // readstmt ::= Read ParentesisAbrir var ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ReadStatement");
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readstmt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // readstmt ::= readstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readstmt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= AritExpr1 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();    
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= BoolExpr1 
            {
              Element RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element b1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = b1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= AritExpr1 opRelacion AritExpr1 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= FunctionCall 
            {
              Element RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element fc = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = fc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FunctionCall ::= var ParentesisAbrir exprlist ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FunctionCall ::= var ParentesisAbrir ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AritExpr1 ::= AritExpr1 OperadorSuma AritExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Plus");
                    node.setAttribute("Value","+");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AritExpr1 ::= AritExpr1 OperadorResta AritExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Minus");
                    node.setAttribute("Value","-");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AritExpr1 ::= AritExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();                
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AritExpr2 ::= AritExpr2 OperadorMultiplicacion AritExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Times");
                    node.setAttribute("Value","*");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AritExpr2 ::= AritExpr2 OperadorDivision AritExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Div");
                    node.setAttribute("Value","/");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node   ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AritExpr2 ::= AritExpr3 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AritExpr3 ::= literal 
            {
              Element RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element l = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = l; 
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AritExpr3 ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = v; 
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AritExpr3 ::= opUnario AritExpr3 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    op.appendChild(e1);
                    RESULT = op;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AritExpr3 ::= ParentesisAbrir AritExpr1 ParentesisCerrar 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BoolExpr1 ::= BoolExpr1 OperadorOr BoolExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("OR");
                    nPadre.setAttribute("Value",op);
                    nPadre.appendChild(e1);
                    nPadre.appendChild(e2);
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BoolExpr1 ::= BoolExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BoolExpr2 ::= BoolExpr2 OperadorAnd BoolExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("AND");
                    nPadre.setAttribute("Value",op);
                    nPadre.appendChild(e1);
                    nPadre.appendChild(e2);
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BoolExpr2 ::= BoolExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BoolExpr3 ::= ParentesisAbrir AritExpr1 opRelacion AritExpr1 ParentesisCerrar 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BoolExpr3 ::= ParentesisAbrir BoolExpr1 ParentesisCerrar 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BoolExpr3 ::= OperadorNot BoolExpr3 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("NOT");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    nPadre.appendChild(e1);
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opRelacion ::= OperadorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Equals");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opRelacion ::= OperadorDiferente 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Different");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opRelacion ::= OperadorMayor 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("GreaterThan");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opRelacion ::= OperadorMenor 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LessThan");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // opRelacion ::= OperadorMenorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LessOrEqual");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // opRelacion ::= OperadorMayorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("GreaterOrEqual");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opArit ::= OperadorMod 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opArit ::= OperadorDivisionSpecial 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // opUnario ::= OperadorSuma 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opUnario",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opUnario ::= OperadorResta 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opUnario",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // opLogico ::= OperadorAnd 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("AND");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opLogico",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // opLogico ::= OperadorOr 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("OR");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opLogico",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exprlist ::= expr 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exprlist ::= expr Coma exprlist 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if (e != null) { nPadre.appendChild(e);}
                    if (el != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = el.getChildNodes();
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                    }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // literal ::= integer 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","integer");
                    nPadre.setAttribute("Value",String.valueOf(i.getAttribute("Value")));
                    nPadre.setAttribute("Line", i.getAttribute("Line"));
                    nPadre.setAttribute("Column", i.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // literal ::= character 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","char");
                    nPadre.setAttribute("Value",c.getAttribute("Value"));
                    nPadre.setAttribute("Line", c.getAttribute("Line"));
                    nPadre.setAttribute("Column", c.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // literal ::= boolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","boolean");
                    nPadre.setAttribute("Value",b.getAttribute("Value"));
                    nPadre.setAttribute("Line", b.getAttribute("Line"));
                    nPadre.setAttribute("Column", b.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // literal ::= string 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","string");
                    nPadre.setAttribute("Value",s.getAttribute("Value"));
                    nPadre.setAttribute("Line", s.getAttribute("Line"));
                    nPadre.setAttribute("Column", s.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // integer ::= LiteralEntero 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Integer");
                    nPadre.setAttribute("Value",i.toString());
                    nPadre.setAttribute("Size","4");
                    nPadre.setAttribute("Line", ileft + "");
                    nPadre.setAttribute("Column", iright + "");
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // character ::= LiteralCaracter 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Character");
                    nPadre.setAttribute("Value","\'"+c.toString()+"\'");      
                    nPadre.setAttribute("Line", cleft + "");
                    nPadre.setAttribute("Column", cright + "");      
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("character",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // boolean ::= LiteralBoolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Boolean");
                    nPadre.setAttribute("Value",b);    
                    nPadre.setAttribute("Line", bleft + "");
                    nPadre.setAttribute("Column", bright + "");      
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // string ::= LiteralString 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("String");
                    nPadre.setAttribute("Value","\'"+s+"\'");
                    nPadre.setAttribute("Line", sleft + "");
                    nPadre.setAttribute("Column", sright  + "");
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
