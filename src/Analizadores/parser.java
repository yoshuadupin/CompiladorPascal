
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\012\007\000\002\002\004\000\002\012" +
    "\012\000\002\012\005\000\002\012\007\000\002\013\004" +
    "\000\002\013\004\000\002\014\006\000\002\014\004\000" +
    "\002\015\002\000\002\015\004\000\002\015\004\000\002" +
    "\016\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\004\000\002\023\014\000\002\023\013\000\002\023\004" +
    "\000\002\026\012\000\002\026\011\000\002\026\004\000" +
    "\002\027\002\000\002\027\004\000\002\030\004\000\002" +
    "\024\003\000\002\024\005\000\002\025\006\000\002\025" +
    "\005\000\002\017\002\000\002\017\005\000\002\017\005" +
    "\000\002\017\004\000\002\020\005\000\002\034\003\000" +
    "\002\034\005\000\002\035\003\000\002\035\006\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\012" +
    "\000\002\043\003\000\002\043\005\000\002\043\004\000" +
    "\002\044\002\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\004\000\002\051\005\000\002\051\004\000" +
    "\002\045\005\000\002\045\004\000\002\046\010\000\002" +
    "\046\006\000\002\046\004\000\002\046\005\000\002\021" +
    "\010\000\002\021\007\000\002\021\004\000\002\047\006" +
    "\000\002\047\005\000\002\047\004\000\002\050\006\000" +
    "\002\050\004\000\002\052\006\000\002\052\010\000\002" +
    "\052\004\000\002\053\006\000\002\053\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\005\000\002\002\003" +
    "\000\002\022\006\000\002\022\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\004\000\002\005\005\000\002\006\005" +
    "\000\002\006\003\000\002\007\005\000\002\007\003\000" +
    "\002\010\007\000\002\010\005\000\002\010\004\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\040\003" +
    "\000\002\040\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\003\000\002\042\003\000\002\036\003\000\002" +
    "\036\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\054\003\000\002\055\003" +
    "\000\002\056\003\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\006\003\006\057\004\001\002\000\004\054" +
    "\024\001\002\000\004\002\344\001\002\000\014\003\014" +
    "\006\017\035\ufff8\060\010\061\007\001\002\000\006\003" +
    "\324\054\024\001\002\000\006\003\266\054\024\001\002" +
    "\000\014\003\ufff4\006\ufff4\035\ufff4\060\ufff4\061\ufff4\001" +
    "\002\000\004\063\264\001\002\000\014\003\ufff3\006\ufff3" +
    "\035\ufff3\060\ufff3\061\ufff3\001\002\000\004\036\263\001" +
    "\002\000\014\003\262\006\017\035\ufff8\060\010\061\007" +
    "\001\002\000\006\003\114\035\113\001\002\000\016\003" +
    "\021\006\uffe4\035\uffe4\054\024\060\uffe4\061\uffe4\001\002" +
    "\000\004\064\111\001\002\000\020\003\021\006\uffe4\035" +
    "\uffe4\054\024\060\uffe4\061\uffe4\064\106\001\002\000\010" +
    "\051\uffdf\052\uffdf\056\uffdf\001\002\000\006\051\064\052" +
    "\065\001\002\000\064\003\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\024\uffdd\025\uffdd\026\uffdd\030" +
    "\uffdd\033\uffdd\034\uffdd\036\uffdd\040\uffdd\041\uffdd\044\uffdd" +
    "\047\026\050\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\056" +
    "\uffdd\064\uffdd\001\002\000\014\003\ufff5\006\ufff5\035\ufff5" +
    "\060\ufff5\061\ufff5\001\002\000\022\024\032\025\047\054" +
    "\024\055\046\065\031\066\033\067\041\070\036\001\002" +
    "\000\056\003\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017" +
    "\uff8b\020\uff8b\024\uff8b\025\uff8b\026\uff8b\030\uff8b\033\uff8b" +
    "\034\uff8b\036\uff8b\040\uff8b\041\uff8b\044\uff8b\050\uff8b\051" +
    "\uff8b\056\uff8b\062\uff8b\064\uff8b\001\002\000\056\003\uff89" +
    "\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\024" +
    "\uff89\025\uff89\026\uff89\030\uff89\033\uff89\034\uff89\036\uff89" +
    "\040\uff89\041\uff89\044\uff89\050\uff89\051\uff89\056\uff89\062" +
    "\uff89\064\uff89\001\002\000\056\003\uff88\013\uff88\014\uff88" +
    "\015\uff88\016\uff88\017\uff88\020\uff88\024\uff88\025\uff88\026" +
    "\uff88\030\uff88\033\uff88\034\uff88\036\uff88\040\uff88\041\uff88" +
    "\044\uff88\050\uff88\051\uff88\056\uff88\062\uff88\064\uff88\001" +
    "\002\000\022\024\uff92\025\uff92\054\uff92\055\uff92\065\uff92" +
    "\066\uff92\067\uff92\070\uff92\001\002\000\056\003\uff87\013" +
    "\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\024\uff87" +
    "\025\uff87\026\uff87\030\uff87\033\uff87\034\uff87\036\uff87\040" +
    "\uff87\041\uff87\044\uff87\050\uff87\051\uff87\056\uff87\062\uff87" +
    "\064\uff87\001\002\000\054\003\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\030\uffa5\033\uffa5\034\uffa5\036\uffa5\040\uffa5\041\uffa5\044" +
    "\uffa5\050\uffa5\051\uffa5\056\uffa5\064\uffa5\001\002\000\022" +
    "\024\032\025\047\054\024\055\046\065\031\066\033\067" +
    "\041\070\036\001\002\000\056\003\uff85\013\uff85\014\uff85" +
    "\015\uff85\016\uff85\017\uff85\020\uff85\024\uff85\025\uff85\026" +
    "\uff85\030\uff85\033\uff85\034\uff85\036\uff85\040\uff85\041\uff85" +
    "\044\uff85\050\uff85\051\uff85\056\uff85\062\uff85\064\uff85\001" +
    "\002\000\056\003\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c" +
    "\017\uff8c\020\uff8c\024\uff8c\025\uff8c\026\uff8c\030\uff8c\033" +
    "\uff8c\034\uff8c\036\uff8c\040\uff8c\041\uff8c\044\uff8c\050\uff8c" +
    "\051\uff8c\056\uff8c\062\uff8c\064\uff8c\001\002\000\054\003" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\030\uffa6\033\uffa6\034\uffa6\036" +
    "\uffa6\040\uffa6\041\uffa6\044\uffa6\050\uffa6\051\uffa6\056\uffa6" +
    "\064\uffa6\001\002\000\056\003\uff86\013\uff86\014\uff86\015" +
    "\uff86\016\uff86\017\uff86\020\uff86\024\uff86\025\uff86\026\uff86" +
    "\030\uff86\033\uff86\034\uff86\036\uff86\040\uff86\041\uff86\044" +
    "\uff86\050\uff86\051\uff86\056\uff86\062\uff86\064\uff86\001\002" +
    "\000\054\003\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\024\uffa9\025\uffa9\026\056\030\055\033\uffa9" +
    "\034\uffa9\036\uffa9\040\uffa9\041\uffa9\044\uffa9\050\uffa9\051" +
    "\uffa9\056\uffa9\064\uffa9\001\002\000\010\024\051\025\052" +
    "\050\062\001\002\000\054\003\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\030\uffa4\033\uffa4\034\uffa4\036\uffa4\040\uffa4\041\uffa4\044" +
    "\uffa4\050\uffa4\051\uffa4\056\uffa4\064\uffa4\001\002\000\056" +
    "\003\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\030\uff8a\033\uff8a\034\uff8a" +
    "\036\uff8a\040\uff8a\041\uff8a\044\uff8a\050\uff8a\051\uff8a\056" +
    "\uff8a\062\uff8a\064\uff8a\001\002\000\022\024\032\025\047" +
    "\054\024\055\046\065\031\066\033\067\041\070\036\001" +
    "\002\000\022\024\uff91\025\uff91\054\uff91\055\uff91\065\uff91" +
    "\066\uff91\067\uff91\070\uff91\001\002\000\010\024\051\025" +
    "\052\056\053\001\002\000\022\024\032\025\047\054\024" +
    "\055\046\065\031\066\033\067\041\070\036\001\002\000" +
    "\022\024\032\025\047\054\024\055\046\065\031\066\033" +
    "\067\041\070\036\001\002\000\054\003\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\030\uffa2\033\uffa2\034\uffa2\036\uffa2\040\uffa2\041" +
    "\uffa2\044\uffa2\050\uffa2\051\uffa2\056\uffa2\064\uffa2\001\002" +
    "\000\054\003\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\024\uffaa\025\uffaa\026\056\030\055\033\uffaa" +
    "\034\uffaa\036\uffaa\040\uffaa\041\uffaa\044\uffaa\050\uffaa\051" +
    "\uffaa\056\uffaa\064\uffaa\001\002\000\022\024\032\025\047" +
    "\054\024\055\046\065\031\066\033\067\041\070\036\001" +
    "\002\000\022\024\032\025\047\054\024\055\046\065\031" +
    "\066\033\067\041\070\036\001\002\000\054\003\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\030\uffa8\033\uffa8\034\uffa8\036\uffa8\040" +
    "\uffa8\041\uffa8\044\uffa8\050\uffa8\051\uffa8\056\uffa8\064\uffa8" +
    "\001\002\000\054\003\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\024\uffa7\025\uffa7\026\uffa7\030\uffa7" +
    "\033\uffa7\034\uffa7\036\uffa7\040\uffa7\041\uffa7\044\uffa7\050" +
    "\uffa7\051\uffa7\056\uffa7\064\uffa7\001\002\000\054\003\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\024" +
    "\uffab\025\uffab\026\056\030\055\033\uffab\034\uffab\036\uffab" +
    "\040\uffab\041\uffab\044\uffab\050\uffab\051\uffab\056\uffab\064" +
    "\uffab\001\002\000\062\003\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\024\uffdc\025\uffdc\026\uffdc\030" +
    "\uffdc\033\uffdc\034\uffdc\036\uffdc\040\uffdc\041\uffdc\044\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\064" +
    "\uffdc\001\002\000\054\003\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\024\uffa3\025\uffa3\026\uffa3\030" +
    "\uffa3\033\uffa3\034\uffa3\036\uffa3\040\uffa3\041\uffa3\044\uffa3" +
    "\050\uffa3\051\uffa3\056\uffa3\064\uffa3\001\002\000\004\054" +
    "\024\001\002\000\014\004\071\007\070\010\075\011\074" +
    "\012\073\001\002\000\004\064\uffdb\001\002\000\004\064" +
    "\uffda\001\002\000\006\056\uffd7\064\uffd7\001\002\000\004" +
    "\047\076\001\002\000\004\064\uffe0\001\002\000\006\056" +
    "\uffd8\064\uffd8\001\002\000\006\056\uffd6\064\uffd6\001\002" +
    "\000\006\056\uffd9\064\uffd9\001\002\000\012\065\031\066" +
    "\033\067\041\070\036\001\002\000\004\062\100\001\002" +
    "\000\012\065\031\066\033\067\041\070\036\001\002\000" +
    "\004\050\102\001\002\000\004\005\103\001\002\000\012" +
    "\007\070\010\075\011\074\012\073\001\002\000\004\064" +
    "\uffd5\001\002\000\010\051\uffde\052\uffde\056\uffde\001\002" +
    "\000\016\003\021\006\uffe4\035\uffe4\054\024\060\uffe4\061" +
    "\uffe4\001\002\000\014\003\uffe1\006\uffe1\035\uffe1\060\uffe1" +
    "\061\uffe1\001\002\000\014\003\uffe2\006\uffe2\035\uffe2\060" +
    "\uffe2\061\uffe2\001\002\000\016\003\021\006\uffe4\035\uffe4" +
    "\054\024\060\uffe4\061\uffe4\001\002\000\014\003\uffe3\006" +
    "\uffe3\035\uffe3\060\uffe3\061\uffe3\001\002\000\030\003\132" +
    "\032\131\035\113\036\uffd1\037\120\042\135\043\122\045" +
    "\117\046\140\054\024\064\uffd1\001\002\000\006\003\ufff6" +
    "\035\ufff6\001\002\000\006\003\116\063\ufffc\001\002\000" +
    "\016\003\uffc5\034\uffc5\036\uffc5\044\uffc5\063\uffc5\064\uffc5" +
    "\001\002\000\004\055\253\001\002\000\004\054\024\001" +
    "\002\000\014\003\244\034\uffcd\036\uffcd\044\uffcd\064\uffcd" +
    "\001\002\000\030\003\132\032\131\035\113\037\120\042" +
    "\135\043\122\044\uffd1\045\117\046\140\054\024\064\uffd1" +
    "\001\002\000\014\003\240\034\uffcc\036\uffcc\044\uffcc\064" +
    "\uffcc\001\002\000\014\003\uffc9\034\uffc9\036\uffc9\044\uffc9" +
    "\064\uffc9\001\002\000\014\003\116\034\uffc8\036\uffc8\044" +
    "\uffc8\064\uffc8\001\002\000\014\003\uffd0\034\uffd0\036\uffd0" +
    "\044\uffd0\064\uffd0\001\002\000\014\003\237\034\uffcf\036" +
    "\uffcf\044\uffcf\064\uffcf\001\002\000\004\036\236\001\002" +
    "\000\024\023\153\024\032\025\047\054\024\055\162\065" +
    "\031\066\033\067\041\070\036\001\002\000\036\003\132" +
    "\032\131\034\224\035\113\036\uffd1\037\120\042\135\043" +
    "\122\044\uffd1\045\117\046\140\054\024\056\225\064\uffd1" +
    "\001\002\000\014\003\223\034\uffce\036\uffce\044\uffce\064" +
    "\uffce\001\002\000\006\053\221\055\205\001\002\000\024" +
    "\023\153\024\032\025\047\054\024\055\162\065\031\066" +
    "\033\067\041\070\036\001\002\000\014\003\151\034\uffca" +
    "\036\uffca\044\uffca\064\uffca\001\002\000\012\003\146\036" +
    "\uffd4\044\uffd4\064\147\001\002\000\004\055\143\001\002" +
    "\000\014\003\142\034\uffcb\036\uffcb\044\uffcb\064\uffcb\001" +
    "\002\000\014\003\uffb7\034\uffb7\036\uffb7\044\uffb7\064\uffb7" +
    "\001\002\000\004\054\024\001\002\000\004\056\145\001" +
    "\002\000\014\003\uffb3\034\uffb3\036\uffb3\044\uffb3\064\uffb3" +
    "\001\002\000\014\003\uffc7\034\uffc7\036\uffc7\044\uffc7\064" +
    "\uffc7\001\002\000\032\003\132\032\131\035\113\036\uffd1" +
    "\037\120\042\135\043\122\044\uffd1\045\117\046\140\054" +
    "\024\064\uffd1\001\002\000\006\036\uffd3\044\uffd3\001\002" +
    "\000\014\003\uffb2\034\uffb2\036\uffb2\044\uffb2\064\uffb2\001" +
    "\002\000\004\041\217\001\002\000\006\023\153\055\170" +
    "\001\002\000\026\003\uffae\033\uffae\034\uffae\036\uffae\040" +
    "\uffae\041\uffae\044\uffae\051\uffae\056\uffae\064\uffae\001\002" +
    "\000\046\003\uffb1\013\173\014\176\015\172\016\200\017" +
    "\177\020\175\024\051\025\052\033\uffb1\034\uffb1\036\uffb1" +
    "\040\uffb1\041\uffb1\044\uffb1\051\uffb1\056\uffb1\064\uffb1\001" +
    "\002\000\054\003\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\024\uffa4\025\uffa4\026\uffa4\030\uffa4\033" +
    "\uffa4\034\uffa4\036\uffa4\040\uffa4\041\uffa4\044\uffa4\051\uffa4" +
    "\055\205\056\uffa4\064\uffa4\001\002\000\032\003\uff9e\021" +
    "\uff9e\022\uff9e\033\uff9e\034\uff9e\036\uff9e\040\uff9e\041\uff9e" +
    "\044\uff9e\051\uff9e\056\uff9e\064\uff9e\001\002\000\032\003" +
    "\uffa0\021\203\022\uffa0\033\uffa0\034\uffa0\036\uffa0\040\uffa0" +
    "\041\uffa0\044\uffa0\051\uffa0\056\uffa0\064\uffa0\001\002\000" +
    "\030\003\uffb0\022\165\033\uffb0\034\uffb0\036\uffb0\040\uffb0" +
    "\041\uffb0\044\uffb0\051\uffb0\056\uffb0\064\uffb0\001\002\000" +
    "\024\023\153\024\032\025\047\054\024\055\162\065\031" +
    "\066\033\067\041\070\036\001\002\000\024\013\173\014" +
    "\176\015\172\016\200\017\177\020\175\024\051\025\052" +
    "\056\053\001\002\000\006\022\165\056\166\001\002\000" +
    "\006\023\153\055\170\001\002\000\032\003\uff9c\021\uff9c" +
    "\022\uff9c\033\uff9c\034\uff9c\036\uff9c\040\uff9c\041\uff9c\044" +
    "\uff9c\051\uff9c\056\uff9c\064\uff9c\001\002\000\032\003\uffa1" +
    "\021\203\022\uffa1\033\uffa1\034\uffa1\036\uffa1\040\uffa1\041" +
    "\uffa1\044\uffa1\051\uffa1\056\uffa1\064\uffa1\001\002\000\024" +
    "\023\153\024\032\025\047\054\024\055\162\065\031\066" +
    "\033\067\041\070\036\001\002\000\022\013\173\014\176" +
    "\015\172\016\200\017\177\020\175\024\051\025\052\001" +
    "\002\000\022\024\uff98\025\uff98\054\uff98\055\uff98\065\uff98" +
    "\066\uff98\067\uff98\070\uff98\001\002\000\022\024\uff9a\025" +
    "\uff9a\054\uff9a\055\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a" +
    "\001\002\000\022\024\032\025\047\054\024\055\046\065" +
    "\031\066\033\067\041\070\036\001\002\000\022\024\uff96" +
    "\025\uff96\054\uff96\055\uff96\065\uff96\066\uff96\067\uff96\070" +
    "\uff96\001\002\000\022\024\uff99\025\uff99\054\uff99\055\uff99" +
    "\065\uff99\066\uff99\067\uff99\070\uff99\001\002\000\022\024" +
    "\uff95\025\uff95\054\uff95\055\uff95\065\uff95\066\uff95\067\uff95" +
    "\070\uff95\001\002\000\022\024\uff97\025\uff97\054\uff97\055" +
    "\uff97\065\uff97\066\uff97\067\uff97\070\uff97\001\002\000\010" +
    "\024\051\025\052\056\202\001\002\000\032\003\uff9d\021" +
    "\uff9d\022\uff9d\033\uff9d\034\uff9d\036\uff9d\040\uff9d\041\uff9d" +
    "\044\uff9d\051\uff9d\056\uff9d\064\uff9d\001\002\000\006\023" +
    "\153\055\170\001\002\000\032\003\uff9f\021\uff9f\022\uff9f" +
    "\033\uff9f\034\uff9f\036\uff9f\040\uff9f\041\uff9f\044\uff9f\051" +
    "\uff9f\056\uff9f\064\uff9f\001\002\000\026\023\153\024\032" +
    "\025\047\054\024\055\162\056\210\065\031\066\033\067" +
    "\041\070\036\001\002\000\004\056\213\001\002\000\006" +
    "\051\211\056\uff8e\001\002\000\026\003\uffac\033\uffac\034" +
    "\uffac\036\uffac\040\uffac\041\uffac\044\uffac\051\uffac\056\uffac" +
    "\064\uffac\001\002\000\024\023\153\024\032\025\047\054" +
    "\024\055\162\065\031\066\033\067\041\070\036\001\002" +
    "\000\004\056\uff8d\001\002\000\026\003\uffad\033\uffad\034" +
    "\uffad\036\uffad\040\uffad\041\uffad\044\uffad\051\uffad\056\uffad" +
    "\064\uffad\001\002\000\022\024\032\025\047\054\024\055" +
    "\046\065\031\066\033\067\041\070\036\001\002\000\032" +
    "\003\uffaf\024\051\025\052\033\uffaf\034\uffaf\036\uffaf\040" +
    "\uffaf\041\uffaf\044\uffaf\051\uffaf\056\uffaf\064\uffaf\001\002" +
    "\000\032\003\uff9b\021\uff9b\022\uff9b\033\uff9b\034\uff9b\036" +
    "\uff9b\040\uff9b\041\uff9b\044\uff9b\051\uff9b\056\uff9b\064\uff9b" +
    "\001\002\000\016\003\uffba\034\uffba\035\113\036\uffba\044" +
    "\uffba\064\uffba\001\002\000\014\003\116\034\uffbb\036\uffbb" +
    "\044\uffbb\064\uffbb\001\002\000\024\023\153\024\032\025" +
    "\047\054\024\055\162\065\031\066\033\067\041\070\036" +
    "\001\002\000\016\003\uffc4\034\uffc4\036\uffc4\040\uffc4\044" +
    "\uffc4\064\uffc4\001\002\000\014\003\uffc0\034\uffc0\036\uffc0" +
    "\044\uffc0\064\uffc0\001\002\000\034\003\227\032\131\034" +
    "\uffd1\035\113\036\uffd1\037\120\042\135\043\122\044\uffd1" +
    "\045\117\046\140\054\024\064\uffd1\001\002\000\014\003" +
    "\uffb4\034\uffb4\036\uffb4\044\uffb4\064\uffb4\001\002\000\006" +
    "\036\uffd2\044\uffd2\001\002\000\006\034\224\056\225\001" +
    "\002\000\014\003\146\034\uffbf\036\uffbf\044\uffbf\064\uffbf" +
    "\001\002\000\004\033\232\001\002\000\034\003\227\032" +
    "\131\034\uffd1\035\113\036\uffd1\037\120\042\135\043\122" +
    "\044\uffd1\045\117\046\140\054\024\064\uffd1\001\002\000" +
    "\014\003\146\034\234\036\uffc1\044\uffc1\064\uffc1\001\002" +
    "\000\034\003\227\032\131\034\uffd1\035\113\036\uffd1\037" +
    "\120\042\135\043\122\044\uffd1\045\117\046\140\054\024" +
    "\064\uffd1\001\002\000\014\003\146\034\uffc2\036\uffc2\044" +
    "\uffc2\064\uffc2\001\002\000\016\003\uffc6\034\uffc6\036\uffc6" +
    "\044\uffc6\063\uffc6\064\uffc6\001\002\000\016\003\uffc3\034" +
    "\uffc3\036\uffc3\040\uffc3\044\uffc3\064\uffc3\001\002\000\014" +
    "\003\uffb9\034\uffb9\036\uffb9\044\uffb9\064\uffb9\001\002\000" +
    "\004\044\242\001\002\000\024\023\153\024\032\025\047" +
    "\054\024\055\162\065\031\066\033\067\041\070\036\001" +
    "\002\000\014\003\uffb8\034\uffb8\036\uffb8\044\uffb8\064\uffb8" +
    "\001\002\000\014\003\uffbc\034\uffbc\036\uffbc\044\uffbc\064" +
    "\uffbc\001\002\000\004\053\221\001\002\000\006\003\237" +
    "\040\247\001\002\000\024\023\153\024\032\025\047\054" +
    "\024\055\162\065\031\066\033\067\041\070\036\001\002" +
    "\000\004\041\251\001\002\000\016\003\uffbd\034\uffbd\035" +
    "\113\036\uffbd\044\uffbd\064\uffbd\001\002\000\014\003\116" +
    "\034\uffbe\036\uffbe\044\uffbe\064\uffbe\001\002\000\004\070" +
    "\036\001\002\000\006\051\255\056\256\001\002\000\004" +
    "\054\024\001\002\000\014\003\uffb6\034\uffb6\036\uffb6\044" +
    "\uffb6\064\uffb6\001\002\000\004\056\260\001\002\000\014" +
    "\003\uffb5\034\uffb5\036\uffb5\044\uffb5\064\uffb5\001\002\000" +
    "\006\003\114\035\ufff7\001\002\000\014\003\ufff2\006\ufff2" +
    "\035\ufff2\060\ufff2\061\ufff2\001\002\000\006\003\ufffb\063" +
    "\ufffb\001\002\000\004\002\ufffe\001\002\000\004\055\267" +
    "\001\002\000\014\003\uffec\006\uffec\035\uffec\060\uffec\061" +
    "\uffec\001\002\000\010\006\274\054\024\056\272\001\002" +
    "\000\006\056\uffe8\064\322\001\002\000\004\056\316\001" +
    "\002\000\004\064\302\001\002\000\006\051\064\052\300" +
    "\001\002\000\004\054\024\001\002\000\006\051\064\052" +
    "\276\001\002\000\012\007\070\010\075\011\074\012\073" +
    "\001\002\000\006\056\uffe6\064\uffe6\001\002\000\012\007" +
    "\070\010\075\011\074\012\073\001\002\000\006\056\uffe5" +
    "\064\uffe5\001\002\000\006\006\306\035\uffeb\001\002\000" +
    "\006\003\314\064\315\001\002\000\004\035\311\001\002" +
    "\000\006\006\306\035\uffeb\001\002\000\012\003\021\006" +
    "\uffe4\035\uffe4\054\024\001\002\000\006\006\uffe9\035\uffe9" +
    "\001\002\000\004\035\uffea\001\002\000\030\003\132\032" +
    "\131\035\113\036\uffd1\037\120\042\135\043\122\045\117" +
    "\046\140\054\024\064\uffd1\001\002\000\004\036\313\001" +
    "\002\000\006\003\ufffa\064\ufffa\001\002\000\006\003\ufff9" +
    "\064\ufff9\001\002\000\014\003\uffed\006\uffed\035\uffed\060" +
    "\uffed\061\uffed\001\002\000\004\064\317\001\002\000\006" +
    "\006\306\035\uffeb\001\002\000\006\003\314\064\321\001" +
    "\002\000\014\003\uffee\006\uffee\035\uffee\060\uffee\061\uffee" +
    "\001\002\000\006\006\274\054\024\001\002\000\004\056" +
    "\uffe7\001\002\000\014\003\uffef\006\uffef\035\uffef\060\uffef" +
    "\061\uffef\001\002\000\004\055\326\001\002\000\010\006" +
    "\274\054\024\056\330\001\002\000\004\056\336\001\002" +
    "\000\004\052\331\001\002\000\014\004\071\007\070\010" +
    "\075\011\074\012\073\001\002\000\004\064\333\001\002" +
    "\000\006\006\306\035\uffeb\001\002\000\006\003\314\064" +
    "\335\001\002\000\014\003\ufff0\006\ufff0\035\ufff0\060\ufff0" +
    "\061\ufff0\001\002\000\004\052\337\001\002\000\014\004" +
    "\071\007\070\010\075\011\074\012\073\001\002\000\004" +
    "\064\341\001\002\000\006\006\306\035\uffeb\001\002\000" +
    "\006\003\314\064\343\001\002\000\014\003\ufff1\006\ufff1" +
    "\035\ufff1\060\ufff1\061\ufff1\001\002\000\004\002\000\001" +
    "\002\000\006\055\346\064\347\001\002\000\004\054\024" +
    "\001\002\000\014\003\014\006\017\035\ufff8\060\010\061" +
    "\007\001\002\000\006\003\351\063\352\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\001\001\002\000\006\051" +
    "\064\056\354\001\002\000\004\064\355\001\002\000\014" +
    "\003\014\006\017\035\ufff8\060\010\061\007\001\002\000" +
    "\004\063\357\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\012\004\001\001\000\004\035\344\001" +
    "\001\000\002\001\001\000\014\013\011\015\015\016\014" +
    "\023\010\026\012\001\001\000\004\035\324\001\001\000" +
    "\004\035\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\260\016" +
    "\014\023\010\026\012\001\001\000\004\051\114\001\001" +
    "\000\012\017\024\020\017\034\022\035\021\001\001\000" +
    "\002\001\001\000\012\017\106\020\017\034\022\035\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\042\004\041\005\037" +
    "\011\033\035\043\041\034\054\036\055\026\056\044\057" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\062\011\033\035\043\041\034\054\036" +
    "\055\026\056\044\057\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\047\004\041\005\037\011\033\035\043" +
    "\041\034\054\036\055\026\056\044\057\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\060\005\037" +
    "\011\033\035\043\041\034\054\036\055\026\056\044\057" +
    "\027\001\001\000\024\004\053\005\037\011\033\035\043" +
    "\041\034\054\036\055\026\056\044\057\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\057\011\033" +
    "\035\043\041\034\054\036\055\026\056\044\057\027\001" +
    "\001\000\022\005\056\011\033\035\043\041\034\054\036" +
    "\055\026\056\044\057\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\104\001\001\000\010\031\071\032" +
    "\065\033\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\076\054\036\055\026\056\044\057\027\001\001\000" +
    "\002\001\001\000\014\011\100\054\036\055\026\056\044" +
    "\057\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\107\020\017\034\022\035\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\111\020\017" +
    "\034\022\035\021\001\001\000\002\001\001\000\032\021" +
    "\120\022\125\035\133\043\127\044\136\045\126\046\132" +
    "\047\122\050\140\051\124\052\123\053\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\244\045\245\001\001\000\002\001" +
    "\001\000\032\021\120\022\125\035\133\043\240\044\136" +
    "\045\126\046\132\047\122\050\140\051\124\052\123\053" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\230\003\154\004\041\005\037\006\160" +
    "\007\157\010\156\011\033\022\153\035\155\041\034\054" +
    "\036\055\026\056\044\057\027\001\001\000\032\021\120" +
    "\022\125\035\133\043\225\044\136\045\126\046\132\047" +
    "\122\050\140\051\124\052\123\053\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\151\003\154\004" +
    "\041\005\037\006\160\007\157\010\156\011\033\022\153" +
    "\035\155\041\034\054\036\055\026\056\044\057\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\021\120\022\125\035\133\043\147\044\136\045" +
    "\126\046\132\047\122\050\140\051\124\052\123\053\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\215\001\001\000\002\001\001\000\004" +
    "\037\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\162\004\041" +
    "\005\037\006\163\007\157\010\156\011\033\035\043\041" +
    "\034\054\036\055\026\056\044\057\027\001\001\000\004" +
    "\037\173\001\001\000\002\001\001\000\006\007\166\010" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\170\004\041\005\037\006\163\007\157\010\156\011" +
    "\033\035\043\041\034\054\036\055\026\056\044\057\027" +
    "\001\001\000\004\037\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\200\004\041\005\037\011\033" +
    "\035\043\041\034\054\036\055\026\056\044\057\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\203\001\001\000\002\001\001\000\042\002\206" +
    "\003\154\004\041\005\037\006\160\007\157\010\156\011" +
    "\033\022\153\035\155\036\205\041\034\054\036\055\026" +
    "\056\044\057\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\002\206\003\154\004\041" +
    "\005\037\006\160\007\157\010\156\011\033\022\153\035" +
    "\155\036\211\041\034\054\036\055\026\056\044\057\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\214\004\041\005\037\011\033\035\043\041\034\054\036" +
    "\055\026\056\044\057\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\217\001\001\000\002\001\001" +
    "\000\040\002\221\003\154\004\041\005\037\006\160\007" +
    "\157\010\156\011\033\022\153\035\155\041\034\054\036" +
    "\055\026\056\044\057\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\021\120\022\125\035\133\044\227" +
    "\045\126\046\132\047\122\050\140\051\124\052\123\053" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\021" +
    "\120\022\125\035\133\044\232\045\126\046\132\047\122" +
    "\050\140\051\124\052\123\053\135\001\001\000\002\001" +
    "\001\000\030\021\120\022\125\035\133\044\234\045\126" +
    "\046\132\047\122\050\140\051\124\052\123\053\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\242\003" +
    "\154\004\041\005\037\006\160\007\157\010\156\011\033" +
    "\022\153\035\155\041\034\054\036\055\026\056\044\057" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\247\003\154\004" +
    "\041\005\037\006\160\007\157\010\156\011\033\022\153" +
    "\035\155\041\034\054\036\055\026\056\044\057\027\001" +
    "\001\000\002\001\001\000\004\051\251\001\001\000\002" +
    "\001\001\000\004\057\253\001\001\000\002\001\001\000" +
    "\004\035\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\270\025\267\034\272\035\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\274\035\021\001\001\000" +
    "\002\001\001\000\004\032\276\001\001\000\002\001\001" +
    "\000\004\032\300\001\001\000\002\001\001\000\010\014" +
    "\302\027\303\030\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\307\030\304\001\001\000\012\017" +
    "\306\020\017\034\022\035\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\021\120\022\125\035\133\043" +
    "\311\044\136\045\126\046\132\047\122\050\140\051\124" +
    "\052\123\053\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\317\027\303\030\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\322\025\267\034\272" +
    "\035\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\326\025\267\034\272\035\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\331\032\065\033\066\001\001\000\002\001\001\000\010" +
    "\014\333\027\303\030\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\337\032\065" +
    "\033\066\001\001\000\002\001\001\000\010\014\341\027" +
    "\303\030\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\352\035" +
    "\021\001\001\000\014\013\347\015\015\016\014\023\010" +
    "\026\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\355\015\015\016\014\023\010\026\012\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        @Override
	public void report_error(String message, Object info) {
            System.err.print("Syntax error: " ); 
            expected();
            System.err.println("pero se encontró el token \'" + ((Symbol)info).value + "\' en la Linea: " + ((Symbol)info).left + ", Columna: " + ((Symbol)info).right + ". " ); 
        }

        @Override
	public void syntax_error(Symbol s){
            System.err.print("Error Sintáctico: " ); 
            expected();
            System.err.println("pero se encontró el token \'" + sym.terminalNames[s.sym] + "\' en la Linea: " + s.left + ", Columna: " + s.right + ". " ); 
	}

    public void expected(){
        List<Integer> token_list = this.expected_token_ids();
        if (token_list.size() <= 0){
                token_list = this.expected_token_ids();
        }
        String expected_tokens = "";
        for (int i = 0 ; i < token_list.size(); i++){
                int id = token_list.get(i);
                if (id == 1){ //error
                    continue;
                }
                String terminal_name = sym.terminalNames[id];
                if (i == token_list.size() - 1){
                    expected_tokens += terminal_name;
                }else{
                    expected_tokens += terminal_name + " , ";
                }
        }
        System.err.print("Se esperaba alguno de los siguientes tokens: [" + expected_tokens + "] ");
    };

    public void report_fatal_error(String message, Object info) {
        throw new Error("Error Fatal Sintáctico, no se pudo recuperar del problema.");
    }

    public void unrecovered_syntax_error(Symbol s) {
    }

    @Override
    public int error_sync_size(){
        return 1;
    }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    TablaSimbolos tabla = new TablaSimbolos();
    int offset = 0;
    String ambito = "main";

    /* Contruccion del arbol en XML */

    Document xmlDocument = null;    
    Element padre = null; 
    //Crear el documento XML
    private void iniXML() {
        if (xmlDocument == null) {
            try {
                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                xmlDocument = docBuilder.newDocument();
            } catch (Exception e) {
                System.err.println("Se han encontrado errores en el arbol: " + e.getMessage());
            }
        }
    }

    public void escribirXML() throws javax.xml.transform.TransformerConfigurationException, javax.xml.transform.TransformerException {
        xmlDocument.appendChild(padre);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource origen = new DOMSource(xmlDocument);
        StreamResult result = new StreamResult(new File("ARBOL.xml"));
        transformer.transform(origen, result);
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= Program var PuntoComa block Punto 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    padre = xmlDocument.createElement("Program"); 
                    if (v != null) { padre.appendChild(v); }
                    if(b != null) { padre.appendChild(b); }
                    escribirXML();
                    AnalizadorTipo.llenarTablaSimbolos(padre);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element start_val = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Program var ParentesisAbrir vars ParentesisCerrar PuntoComa block Punto 
            {
              Element RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Element v1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    padre = xmlDocument.createElement("Program"); 
                    if (v1 != null) { padre.appendChild(v1); }
                    if (vs != null) { 
                        Element nPadre = xmlDocument.createElement("ProgramArgs");
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = vs.getChildNodes();
                        if (temp.getLength() > 0) {
                            Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                            asd.add((Element) parent);
                        }
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                        padre.appendChild(nPadre);
                    }
                    if(b != null) { padre.appendChild(b); }
                    escribirXML();
                    AnalizadorTipo.llenarTablaSimbolos(padre);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error block Punto 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= Program var PuntoComa block error 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= decls blockstmt 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (d != null) { nPadre.appendChild(d); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= error End 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // blockProc ::= procInlineDecls Begin stmts End 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (p != null) { nPadre.appendChild(p); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockProc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // blockProc ::= blockProc error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockProc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decls ::= decl decls 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element ds = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declarations");
                    if (d != null && ds == null) {
                        RESULT = d;
                    } else if (d == null && ds != null){
                        RESULT = ds;
                    } else if (d != null && ds != null) {
                        nPadre.appendChild(d);
                        if (!ds.getNodeName().equals("Declarations")) {
                            nPadre.appendChild(ds);
                        }else{
                            Element padre = xmlDocument.createElement("ProgramArgs");
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = ds.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                            padre.appendChild(nPadre);
                        }
                       
                        RESULT = nPadre;
                    } else{ RESULT = null; }      
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decls ::= decls error 
            {
              Element RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element ds = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = vd;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= functionDecl 
            {
              Element RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element f = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = f;
                                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl ::= procedureDecl 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = p;                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= decl error 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functionDecl ::= Function var ParentesisAbrir inlineArgs ParentesisCerrar DosPuntos type PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    nPadre.setAttribute("Type", t.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functionDecl ::= Function var ParentesisAbrir ParentesisCerrar DosPuntos type PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    nPadre.setAttribute("Type", t.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functionDecl ::= Function error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedureDecl ::= Procedure var ParentesisAbrir inlineArgs ParentesisCerrar PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedureDecl ::= Procedure var ParentesisAbrir ParentesisCerrar PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML(); 
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedureDecl ::= Procedure error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procInlineDecls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procInlineDecls ::= procInlineDecl procInlineDecls 
            {
              Element RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element pd = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element pds = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcInlinceDecls");
                    if (pd != null && pds == null) {
                        RESULT = pd;
                    } else if(pd == null && pds != null) {
                        RESULT = pds;
                    } else if(pd != null && pds != null) {
                        nPadre.appendChild(pd);
                        nPadre.appendChild(pds);
                        RESULT = nPadre;
                    } else RESULT = null;               
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procInlineDecl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = vd;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procInlineDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inlineArgs ::= inlineArg 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    nPadre.appendChild(ia);
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inlineArgs ::= inlineArg PuntoComa inlineArgs 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element ias = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    nPadre.appendChild(ia);
                    ArrayList<Element> asd = new ArrayList();
                    NodeList temp = ias.getChildNodes();
                    for (int i = 0; i < temp.getLength(); i++) {
                        asd.add((Element) temp.item(i));
                    }
                    for (int i = 0; i < asd.size(); i++) {
                        nPadre.appendChild(asd.get(i));
                    }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inlineArg ::= Var vars DosPuntos identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",t);
                        String size = "";
                        if(t.equals("integer")){
                            size = "4";
                        } else if(t.equals("boolean")){
                            size = "1";
                        } else if(t.equals("char")){
                            size = "1";
                        } else if(t.equals("string")){
                            size = "4";
                        }
                        nType.setAttribute("Size",size);
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlineArg",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inlineArg ::= vars DosPuntos identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                       ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",t);
                        String size = "";
                        if(t.equals("integer")){
                            size = "4";
                        } else if(t.equals("boolean")){
                            size = "1";
                        } else if(t.equals("char")){
                            size = "1";
                        } else if(t.equals("string")){
                            size = "4";
                        }
                        nType.setAttribute("Size",size);
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlineArg",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vardecls ::= 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vardecls ::= vardecl PuntoComa vardecls 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    if(v != null && vs == null ){
                        RESULT = v;
                    } else if(v == null && vs != null){
                        Element nPadre = xmlDocument.createElement("VarDeclaration");
                        nPadre.appendChild(vs);
                        RESULT = nPadre;
                    } else if(v != null && vs != null){
                        Element nPadre = xmlDocument.createElement("VarDeclarations");
                        nPadre.appendChild(v);
                        if (vs.getNodeName().equals("VarDeclaration")) {
                            nPadre.appendChild(vs);
                        } else {
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = vs.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vardecls ::= error PuntoComa vardecls 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vardecls ::= error vardecls 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vardecl ::= vars DosPuntos type 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarDeclaration");
                    if (vs != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                String id = asd.get(i).getAttribute("Value");
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    nPadre.appendChild(t);
                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vars ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = v;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vars ::= vars Coma var 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    vs.appendChild(v);
                    RESULT = vs;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= Identificador 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ID");
                    nPadre.setAttribute("Value",i);
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= Identificador BracketAbrir AritExpr1 BracketCerrar 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ARRAY");
                    nPadre.setAttribute("Value",i);
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    nPadre.appendChild(e1);
                    RESULT = nPadre;                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= identtype 
            {
              Element RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(it != null) {
                        nPadre.setAttribute("Value",it);
                        String size = "";
                        if(it.equals("integer")){
                            size = "4";
                        } else if(it.equals("boolean")){
                            size = "1";
                        } else if(it.equals("char")){
                            size = "1";
                        } else if(it.equals("string")){
                            size = "4";
                        }

                        nPadre.setAttribute("Size",size);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= arraytype 
            {
              Element RESULT =null;
		int atsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element ats = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(ats != null) {
                        nPadre.setAttribute("Value",ats.getAttribute("Value"));
                        nPadre.setAttribute("Size",ats.getAttribute("Size"));
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identtype ::= TipoChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // identtype ::= TipoString 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // identtype ::= TipoBoolean 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // identtype ::= TipoInteger 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arraytype ::= Array BracketAbrir literal PuntoPunto literal BracketCerrar Of identtype 
            {
              Element RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Element l1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element l2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArrayType");
                    if(t != null){
                        nPadre.setAttribute("Value","Array."+t+"."+l1.getAttribute("Value")+"."+l2.getAttribute("Value"));
                        int size = 0;
                        if(t.equals("integer")){
                            size = 4;
                        } else if(t.equals("boolean")){
                            size = 1;
                        } else if(t.equals("char")){
                            size = 1;
                        } else if(t.equals("string")){
                            size = 4;
                        }
                        int temp1 = Integer.parseInt(l1.getAttribute("Value"));
                        int temp2 = Integer.parseInt(l2.getAttribute("Value"));
                        nPadre.setAttribute("Size", ((temp2-temp1+1)*size)+"");
                    }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraytype",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmts ::= stmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statements");
                    if (s != null) { nPadre.appendChild(s); RESULT = nPadre;}
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmts ::= stmt PuntoComa stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element ss = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Element nPadre = xmlDocument.createElement("Statements");
                    iniXML();
                    if(s != null && ss == null){
                        RESULT = s;
                    } else if(s == null && ss != null){
                        RESULT = ss;
                    } else if(s != null && ss != null){
                        nPadre.appendChild(s);
                        nPadre.appendChild(ss);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmts ::= error stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= FunctionCall 
            {
              Element RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element fc = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = fc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= assignstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();               
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= ifstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();              
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= forstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();             
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= whilestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();   
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= repeatstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();          
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= readstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();          
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= writestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();       
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= blockstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();             
                    RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= stmt error 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // blockstmt ::= Begin stmts End 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Body");
                    if (s != null) { nPadre.appendChild(s); }             
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockstmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // blockstmt ::= blockstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockstmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignstmt ::= var DosPuntosIgual expr 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Assignment");
                    if (i != null) { nPadre.appendChild(i); }
                    if (e != null) { nPadre.appendChild(e); }                   
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignstmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignstmt ::= assignstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignstmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ifstmt ::= If expr Then stmt Else stmt 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    if (s2 != null) { nPadre.appendChild(s2); }

                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ifstmt ::= If expr Then stmt 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ifstmt ::= ifstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ifstmt ::= error Else stmt 
            {
              Element RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // forstmt ::= For assignstmt To expr Do blockstmt 
            {
              Element RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // forstmt ::= For assignstmt To expr Do 
            {
              Element RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // forstmt ::= forstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // whilestmt ::= While expr Do blockstmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // whilestmt ::= While expr Do 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // whilestmt ::= whilestmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // repeatstmt ::= Repeat stmts Until expr 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RepeatStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeatstmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // repeatstmt ::= repeatstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeatstmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // writestmt ::= Write ParentesisAbrir string ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // writestmt ::= Write ParentesisAbrir string Coma var ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // writestmt ::= error ParentesisCerrar 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writestmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // readstmt ::= Read ParentesisAbrir var ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ReadStatement");
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readstmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // readstmt ::= readstmt error 
            {
              Element RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readstmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= AritExpr1 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();    
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= BoolExpr1 
            {
              Element RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element b1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = b1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= AritExpr1 opRelacion AritExpr1 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= FunctionCall 
            {
              Element RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element fc = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = fc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FunctionCall ::= var ParentesisAbrir exprlist ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FunctionCall ::= var ParentesisAbrir ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AritExpr1 ::= AritExpr1 OperadorSuma AritExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Plus");
                    node.setAttribute("Value","+");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AritExpr1 ::= AritExpr1 OperadorResta AritExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Minus");
                    node.setAttribute("Value","-");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AritExpr1 ::= AritExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();                
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AritExpr2 ::= AritExpr2 OperadorMultiplicacion AritExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Times");
                    node.setAttribute("Value","*");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AritExpr2 ::= AritExpr2 OperadorDivision AritExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Div");
                    node.setAttribute("Value","/");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node   ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AritExpr2 ::= AritExpr3 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AritExpr3 ::= literal 
            {
              Element RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element l = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = l; 
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AritExpr3 ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = v; 
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AritExpr3 ::= opUnario AritExpr3 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    op.appendChild(e1);
                    RESULT = op;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AritExpr3 ::= ParentesisAbrir AritExpr1 ParentesisCerrar 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BoolExpr1 ::= BoolExpr1 OperadorOr BoolExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("OR");
                    nPadre.setAttribute("Value",op);
                    nPadre.appendChild(e1);
                    nPadre.appendChild(e2);
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BoolExpr1 ::= BoolExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BoolExpr2 ::= BoolExpr2 OperadorAnd BoolExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("AND");
                    nPadre.setAttribute("Value",op);
                    nPadre.appendChild(e1);
                    nPadre.appendChild(e2);
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BoolExpr2 ::= BoolExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BoolExpr3 ::= ParentesisAbrir AritExpr1 opRelacion AritExpr1 ParentesisCerrar 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BoolExpr3 ::= ParentesisAbrir BoolExpr1 ParentesisCerrar 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BoolExpr3 ::= OperadorNot BoolExpr3 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("NOT");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    nPadre.appendChild(e1);
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExpr3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opRelacion ::= OperadorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Equals");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opRelacion ::= OperadorDiferente 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Different");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opRelacion ::= OperadorMayor 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("GreaterThan");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opRelacion ::= OperadorMenor 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LessThan");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // opRelacion ::= OperadorMenorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LessOrEqual");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // opRelacion ::= OperadorMayorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("GreaterOrEqual");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opArit ::= OperadorMod 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opArit",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opArit ::= OperadorDivisionSpecial 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opArit",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // opUnario ::= OperadorSuma 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opUnario ::= OperadorResta 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opUnario",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // opLogico ::= OperadorAnd 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("AND");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opLogico",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // opLogico ::= OperadorOr 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("OR");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opLogico",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exprlist ::= expr 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exprlist ::= expr Coma exprlist 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if (e != null) { nPadre.appendChild(e);}
                    if (el != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = el.getChildNodes();
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                    }
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // literal ::= integer 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","integer");
                    nPadre.setAttribute("Value",String.valueOf(i.getAttribute("Value")));
                    nPadre.setAttribute("Line", i.getAttribute("Line"));
                    nPadre.setAttribute("Column", i.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // literal ::= character 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","char");
                    nPadre.setAttribute("Value",c.getAttribute("Value"));
                    nPadre.setAttribute("Line", c.getAttribute("Line"));
                    nPadre.setAttribute("Column", c.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // literal ::= boolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","boolean");
                    nPadre.setAttribute("Value",b.getAttribute("Value"));
                    nPadre.setAttribute("Line", b.getAttribute("Line"));
                    nPadre.setAttribute("Column", b.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // literal ::= string 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","string");
                    nPadre.setAttribute("Value",s.getAttribute("Value"));
                    nPadre.setAttribute("Line", s.getAttribute("Line"));
                    nPadre.setAttribute("Column", s.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // integer ::= LiteralEntero 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Integer");
                    nPadre.setAttribute("Value",i.toString());
                    nPadre.setAttribute("Size","4");
                    nPadre.setAttribute("Line", ileft + "");
                    nPadre.setAttribute("Column", iright + "");
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // character ::= LiteralCaracter 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Character");
                    nPadre.setAttribute("Value","\'"+c.toString()+"\'");      
                    nPadre.setAttribute("Line", cleft + "");
                    nPadre.setAttribute("Column", cright + "");      
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("character",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // boolean ::= LiteralBoolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Boolean");
                    nPadre.setAttribute("Value",b);    
                    nPadre.setAttribute("Line", bleft + "");
                    nPadre.setAttribute("Column", bright + "");      
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // string ::= LiteralString 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("String");
                    nPadre.setAttribute("Value","\'"+s+"\'");
                    nPadre.setAttribute("Line", sleft + "");
                    nPadre.setAttribute("Column", sright  + "");
                    RESULT = nPadre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
